#!/usr/bin/env bash
# Script to convert between kitty and ghostty config formats
# Usage: ./font-conf-convert --from [kitty|ghostty] --to [kitty|ghostty]
# Operates on stdin/stdout

# https://sw.kovidgoyal.net/kitty/kittens/choose-fonts/#font-spec-syntax
# https://ghostty.org/docs/config/reference#font-family
# https://alacritty.org/config-alacritty.html#font

set -euo pipefail

main() {
  if [[ $1 == --supported ]]; then
    echo "kitty|ghostty"
    exit 0
  fi

  # Parse command line arguments
  FROM_FORMAT=""
  TO_FORMAT=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --from)
        FROM_FORMAT="$2"
        shift 2
        ;;
      --to)
        TO_FORMAT="$2"
        shift 2
        ;;
      *)
        print_usage
        ;;
    esac
  done

  # Validate arguments
  if [[ -z "$FROM_FORMAT" || -z "$TO_FORMAT" ]]; then
    print_usage
  fi

  if [[ "$FROM_FORMAT" != "kitty" && "$FROM_FORMAT" != "ghostty" ]]; then
    echo "Error: --from must be either 'kitty' or 'ghostty'" >&2
    exit 1
  fi

  if [[ "$TO_FORMAT" != "kitty" && "$TO_FORMAT" != "ghostty" ]]; then
    echo "Error: --to must be either 'kitty' or 'ghostty'" >&2
    exit 1
  fi

  if [[ "$FROM_FORMAT" == "$TO_FORMAT" ]]; then
    pass_through
  elif [[ "$FROM_FORMAT" == "kitty" && "$TO_FORMAT" == "ghostty" ]]; then
    kitty_to_ghostty
  elif [[ "$FROM_FORMAT" == "ghostty" && "$TO_FORMAT" == "kitty" ]]; then
    ghostty_to_kitty
  fi
}

extract_kitty_font_value() {
  local key=$1
  if [[ "$line" =~ $key=\'([^\']+)\' ]]; then
    printf "%s" "${BASH_REMATCH[1]}"
  elif [[ "$line" =~ $key=\"([^\"]+)\" ]]; then
    printf "%s" "${BASH_REMATCH[1]}"
  elif [[ "$line" =~ $key=([^[:space:]]+) ]]; then
    printf "%s" "${BASH_REMATCH[1]}"
  fi
}

# Function to convert kitty format to ghostty format
kitty_to_ghostty() {
  local -A font_map=(
    [font_family]=""
    [bold_font]="-bold"
    [italic_font]="-italic"
    [bold_italic_font]="-bold-italic"
  )

  while IFS= read -r line; do
    local matched=false

    for prefix in font_family bold_font italic_font bold_italic_font; do
      if [[ "$line" =~ ^$prefix ]]; then
        matched=true

        case "$prefix" in
          font_family)         suffix="" ;;
          bold_font)           suffix="-bold" ;;
          italic_font)         suffix="-italic" ;;
          bold_italic_font)    suffix="-bold-italic" ;;
        esac

        if [[ "$line" =~ family=([a-zA-Z]+)|family=\'([^\']+)\'|family=\"([^\"]+)\" ]]; then
          family="${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[3]}"
          echo "font-family${suffix} = \"$family\""
        elif [[ "$line" =~ ${prefix}\ *([a-zA-Z]+)|${prefix}\ *\'([^\']+)\'|${prefix}\ *\"([^\"]+)\" ]]; then
          family="${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[3]}"
          echo "font-family${suffix} = \"$family\""
        fi

        if [[ "$line" =~ style=([a-zA-Z]+)|style=\'([^\']+)\'|style=\"([^\"]+)\" ]]; then
          style="${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[3]}"
          echo "font-style${suffix} = \"$style\""
        fi

        if [[ "$line" =~ features=([^[:space:]]+)|features=\"([^\"]+)\"|features=\'([^\']+)\' ]]; then
          features="${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[3]}"
          features_out=()
          for feature in $features; do
            features_out+=("font-feature = \"$(echo $feature | tr -d "'\"")\"")
          done
        fi
      fi
    done

    if [[ "$line" =~ ^font_size ]]; then
      matched=true
      if [[ "$line" =~ font_size[[:space:]]+([0-9.]+) ]]; then
        size="${BASH_REMATCH[1]}"
        echo "font-size = $size"
      fi
    elif [[ "$line" =~ modify_font[[:space:]]+cell_height ]]; then
      matched=true
      if [[ "$line" =~ ([0-9]+)% ]]; then
        percentage="${BASH_REMATCH[1]}"
        adjusted=$((percentage - 100))
        echo "adjust-cell-height = $adjusted%"
      fi
    elif [[ "$line" =~ modify_font[[:space:]]+cell_width ]]; then
      matched=true
      if [[ "$line" =~ ([0-9]+)% ]]; then
        percentage="${BASH_REMATCH[1]}"
        adjusted=$((percentage - 100))
        echo "adjust-cell-width = $adjusted%"
      fi
    elif [[ "$line" =~ window_padding_width ]]; then
      matched=true
      if [[ "$line" =~ window_padding_width[[:space:]]+([0-9]+) ]]; then
        padding="${BASH_REMATCH[1]}"
        echo "window-padding-x = $padding"
        echo "window-padding-y = $padding"
      fi
    fi

    if [[ "$line" =~ ^$ ]]; then
      matched=true
      echo
    fi

    if [[ "$matched" == false ]]; then
      echo "# $line"
    fi
  done
  printf "%s\n" "${features_out[@]}" | sort -u
}

ghostty_to_kitty() {
  local features_acc=''
  local -a other_lines
  local -A font_blocks
  local -A styles_blocks
  local -A padding_seen
  local -A suffix_to_prefix=(
    ["-bold"]="bold_font"
    ["-italic"]="italic_font"
    ["-bold-italic"]="bold_italic_font"
    ["__normal"]="font_family"
  )

  # Preserve line order
  mapfile -t lines
  for line in "${lines[@]}"; do
    local matched=false

    if [[ "$line" =~ ^font-family(-bold|-italic|-bold-italic)?\ *=\ *\"?([^\"]+)\"? ]]; then
      matched=true
      suffix="${BASH_REMATCH[1]}"
      family="${BASH_REMATCH[2]}"

      if [[ -z "${suffix+x}" || -z "$suffix" ]]; then
        prefix="font_family"
      else
        prefix="${suffix_to_prefix[$suffix]}"
      fi

      font_blocks[$prefix]="${font_blocks[$prefix]:-} family='$(echo $family | tr -d "'\"")'"
      continue
    fi

    # Font style
    if [[ "$line" =~ ^font-style(-bold|-italic|-bold-italic)?\ *=\ *\"?([^\"]+?)\"?$ ]]; then
      matched=true
      suffix="${BASH_REMATCH[1]}"
      style="${BASH_REMATCH[2]}"
      if [[ -z "$suffix" ]]; then
        prefix="font_family"
      else
        prefix="${suffix_to_prefix[$suffix]}"
      fi
      font_blocks[$prefix]="${font_blocks[$prefix]:-} style='$(echo $style | tr -d "'\"")'"
      continue
    fi

    # Font features (accumulate all)
    if [[ "$line" =~ ^font-feature\ *=\ *\"?([^\"]+)\"?$ ]]; then
      matched=true
      feature="${BASH_REMATCH[1]}"
      features_acc="${features_acc:+$features_acc }$feature"
      continue
    fi

    # Font size
    if [[ "$line" =~ ^font-size[[:space:]]*=[[:space:]]*([0-9.]+) ]]; then
      matched=true
      other_lines+=("font_size ${BASH_REMATCH[1]}")
      continue
    fi

    # Cell height
    if [[ "$line" =~ ^adjust-cell-height[[:space:]]*=[[:space:]]*([+-]?[0-9]+)% ]]; then
      matched=true
      adj="${BASH_REMATCH[1]}"
      percent=$((100 + adj))
      other_lines+=("modify_font cell_height ${percent}%")
      continue
    fi

    # Cell width
    if [[ "$line" =~ ^adjust-cell-width[[:space:]]*=[[:space:]]*([+-]?[0-9]+)% ]]; then
      matched=true
      adj="${BASH_REMATCH[1]}"
      percent=$((100 + adj))
      other_lines+=("modify_font cell_width ${percent}%")
      continue
    fi

    # Window padding x/y
    if [[ "$line" =~ ^window-padding-x[[:space:]]*=[[:space:]]*([0-9]+) ]]; then
      matched=true
      padding_seen[x]="${BASH_REMATCH[1]}"
      continue
    fi
    if [[ "$line" =~ ^window-padding-y[[:space:]]*=[[:space:]]*([0-9]+) ]]; then
      matched=true
      padding_seen[y]="${BASH_REMATCH[1]}"
      continue
    fi

    if [[ "$matched" == false ]]; then
      echo "# $line"
    fi
  done

  # Output font blocks
  for key in font_family bold_font italic_font bold_italic_font; do
    entry="${font_blocks[$key]:-}"
    if [[ -n "$features_acc" ]]; then
      entry="$entry features='$(echo $features_acc | tr -d "'\"")'"
    fi
    if [[ -n "$entry" ]]; then
      printf "%-16s%s\n" "$key" "$entry"
    fi
  done

  for line in "${other_lines[@]}"; do
    echo "$line"
  done

  # Output padding if matched
  if [[ -n "${padding_seen[x]:-}" && "${padding_seen[x]}" == "${padding_seen[y]:-}" ]]; then
    echo "window_padding_width ${padding_seen[x]}"
  fi
}


# Function to pass through without conversion
pass_through() {
  cat -
}

print_usage() {
  echo "Usage: $0 --from [kitty|ghostty] --to [kitty|ghostty]" >&2
  echo "  - Reads from stdin, writes to stdout" >&2
  echo "  - Use --supported to list supported formats" >&2
  exit 1
}

main "$@"
