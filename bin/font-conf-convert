#!/usr/bin/env bash
# Script to convert between kitty and ghostty config formats
# Usage: ./font-conf-convert --from [kitty|ghostty] --to [kitty|ghostty]
# Operates on stdin/stdout

main() {
  # Check for --supported flag
  if [[ $1 == --supported ]]; then
    echo "kitty|ghostty"
    exit 0
  fi

  # Parse command line arguments
  FROM_FORMAT=""
  TO_FORMAT=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --from)
        FROM_FORMAT="$2"
        shift 2
        ;;
      --to)
        TO_FORMAT="$2"
        shift 2
        ;;
      *)
        print_usage
        ;;
    esac
  done

  # Validate arguments
  if [[ -z "$FROM_FORMAT" || -z "$TO_FORMAT" ]]; then
    print_usage
  fi

  if [[ "$FROM_FORMAT" != "kitty" && "$FROM_FORMAT" != "ghostty" ]]; then
    echo "Error: --from must be either 'kitty' or 'ghostty'" >&2
    exit 1
  fi

  if [[ "$TO_FORMAT" != "kitty" && "$TO_FORMAT" != "ghostty" ]]; then
    echo "Error: --to must be either 'kitty' or 'ghostty'" >&2
    exit 1
  fi

  # Determine conversion direction or pass-through
  if [[ "$FROM_FORMAT" == "$TO_FORMAT" ]]; then
    # If from and to are the same, just pass through
    pass_through
  elif [[ "$FROM_FORMAT" == "kitty" && "$TO_FORMAT" == "ghostty" ]]; then
    kitty_to_ghostty
  elif [[ "$FROM_FORMAT" == "ghostty" && "$TO_FORMAT" == "kitty" ]]; then
    ghostty_to_kitty
  fi
}

# Function to convert kitty format to ghostty format
kitty_to_ghostty() {
  while IFS= read -r line || [[ -n "$line" ]]; do
    # Skip empty lines and comments
    if [[ -z "$line" || "$line" =~ ^[[:space:]]*$ || "$line" =~ ^[[:space:]]*# ]]; then
      echo "$line"
      continue
    fi

    # Conversion logic based on the line content
    if [[ "$line" =~ font_family ]]; then
      # Extract font family information and features
      if [[ "$line" =~ family=\'([^\']+)\' ]]; then
        font_family="${BASH_REMATCH[1]}"
        echo "font-family = \"$font_family\""
      elif [[ "$line" =~ family=\"([^\"]+)\" ]]; then
        font_family="${BASH_REMATCH[1]}"
        echo "font-family = \"$font_family\""
      fi
    elif [[ "$line" =~ font_features ]]; then
      # Extract and process features separately
      if [[ "$line" =~ font_features[[:space:]]+(.+) ]]; then
        features="${BASH_REMATCH[1]}"
        # Split by spaces and add each feature separately
        for feature in $features; do
          echo "font-feature = \"$feature\""
        done
      fi
    elif [[ "$line" =~ bold_font ]]; then
      if [[ "$line" =~ style=([a-zA-Z]+) ]]; then
        bold_style="${BASH_REMATCH[1]}"
        echo "font-style-bold = $bold_style"
      elif [[ "$line" =~ style=\'([^\']+)\' ]]; then
        bold_style="${BASH_REMATCH[1]}"
        echo "font-style-bold = $bold_style"
      elif [[ "$line" =~ style=\"([^\"]+)\" ]]; then
        bold_style="${BASH_REMATCH[1]}"
        echo "font-style-bold = $bold_style"
      fi
    elif [[ "$line" =~ ^italic_font ]]; then
      if [[ "$line" =~ style=([a-zA-Z]+) ]]; then
        italic_style="${BASH_REMATCH[1]}"
        echo "font-style-italic = $italic_style"
      elif [[ "$line" =~ style=\'([^\']+)\' ]]; then
        italic_style="${BASH_REMATCH[1]}"
        echo "font-style-italic = $italic_style"
      elif [[ "$line" =~ style=\"([^\"]+)\" ]]; then
        italic_style="${BASH_REMATCH[1]}"
        echo "font-style-italic = $italic_style"
      fi
    elif [[ "$line" =~ bold_italic_font ]]; then
      if [[ "$line" =~ style=([a-zA-Z]+) ]]; then
        bold_italic_style="${BASH_REMATCH[1]}"
        echo "font-style-bold-italic = $bold_italic_style"
      elif [[ "$line" =~ style=\'([^\']+)\' ]]; then
        bold_italic_style="${BASH_REMATCH[1]}"
        echo "font-style-bold-italic = $bold_italic_style"
      elif [[ "$line" =~ style=\"([^\"]+)\" ]]; then
        bold_italic_style="${BASH_REMATCH[1]}"
        echo "font-style-bold-italic = $bold_italic_style"
      fi
    elif [[ "$line" =~ ^font_size ]]; then
      if [[ "$line" =~ font_size[[:space:]]+([0-9.]+) ]]; then
        size="${BASH_REMATCH[1]}"
        echo "font-size = $size"
      fi
    elif [[ "$line" =~ modify_font[[:space:]]+cell_height ]]; then
      # Format A uses 110% to mean 10% increase, Format B directly uses 10%
      if [[ "$line" =~ ([0-9]+)% ]]; then
        percentage="${BASH_REMATCH[1]}"
        adjusted=$((percentage - 100))
        echo "adjust-cell-height = $adjusted%"
      fi
    elif [[ "$line" =~ modify_font[[:space:]]+cell_width ]]; then
      # Format A uses 100% to mean 0% increase, Format B directly uses 0%
      if [[ "$line" =~ ([0-9]+)% ]]; then
        percentage="${BASH_REMATCH[1]}"
        adjusted=$((percentage - 100))
        echo "adjust-cell-width = $adjusted%"
      fi
    elif [[ "$line" =~ window_padding_width ]]; then
      if [[ "$line" =~ window_padding_width[[:space:]]+([0-9]+) ]]; then
        padding="${BASH_REMATCH[1]}"
        echo "window-padding-x = $padding"
        echo "window-padding-y = $padding"
      fi
    else
      # Pass through other lines untouched
      echo "$line"
    fi
  done
}

# Function to convert ghostty format to kitty format
ghostty_to_kitty() {
  # Variables to collect multiple font features
  font_features=""

  while IFS= read -r line || [[ -n "$line" ]]; do
    # Skip empty lines and comments
    if [[ -z "$line" || "$line" =~ ^[[:space:]]*$ || "$line" =~ ^[[:space:]]*# ]]; then
      echo "$line"
      continue
    fi

    # Conversion logic based on the line content
    if [[ "$line" =~ font-family ]]; then
      if [[ "$line" =~ font-family[[:space:]]*=[[:space:]]*\"(.+)\" ]]; then
        font_family="${BASH_REMATCH[1]}"
        echo "font_family $font_family"
      fi
    elif [[ "$line" =~ font-feature ]]; then
      # Collect features to consolidate later
      if [[ "$line" =~ font-feature[[:space:]]*=[[:space:]]*\"(.+)\" ]]; then
        feature="${BASH_REMATCH[1]}"
        if [[ -z "$font_features" ]]; then
          font_features="$feature"
        else
          font_features="$font_features $feature"
        fi
      fi
    elif [[ "$line" =~ font-style-bold ]]; then
      if [[ "$line" =~ font-style-bold[[:space:]]*=[[:space:]]*\"?([^\"]+)\"? ]]; then
        bold_style="${BASH_REMATCH[1]}"
        echo "bold_font $bold_style"
      fi
    elif [[ "$line" =~ font-style-italic ]]; then
      if [[ "$line" =~ font-style-italic[[:space:]]*=[[:space:]]*\"?([^\"]+)\"? ]]; then
        italic_style="${BASH_REMATCH[1]}"
        echo "italic_font $italic_style"
      fi
    elif [[ "$line" =~ font-style-bold-italic ]]; then
      if [[ "$line" =~ font-style-bold-italic[[:space:]]*=[[:space:]]*\"?([^\"]+)\"? ]]; then
        bold_italic_style="${BASH_REMATCH[1]}"
        echo "bold_italic_font $bold_italic_style"
      fi
    elif [[ "$line" =~ ^font-size ]]; then
      if [[ "$line" =~ font-size[[:space:]]*=[[:space:]]*([0-9.]+) ]]; then
        size="${BASH_REMATCH[1]}"
        echo "font_size $size"
      fi
    elif [[ "$line" =~ adjust-cell-height ]]; then
      if [[ "$line" =~ adjust-cell-height[[:space:]]*=[[:space:]]*([0-9-]+)% ]]; then
        adjusted="${BASH_REMATCH[1]}"
        percentage=$((adjusted + 100))
        echo "modify_font cell_height ${percentage}%"
      fi
    elif [[ "$line" =~ adjust-cell-width ]]; then
      if [[ "$line" =~ adjust-cell-width[[:space:]]*=[[:space:]]*([0-9-]+)% ]]; then
        adjusted="${BASH_REMATCH[1]}"
        percentage=$((adjusted + 100))
        echo "modify_font cell_width ${percentage}%"
      fi
    elif [[ "$line" =~ window-padding-x && ! "$line" =~ window-padding-y ]]; then
      if [[ "$line" =~ window-padding-x[[:space:]]*=[[:space:]]*([0-9]+)$ ]]; then
        padding_x="${BASH_REMATCH[1]}"
      fi
    elif [[ "$line" =~ window-padding-y ]]; then
      if [[ "$line" =~ window-padding-y[[:space:]]*=[[:space:]]*([0-9]+)$ ]]; then
        padding_y="${BASH_REMATCH[1]}"
        if (( padding_x > padding_y )); then
          padding="$padding_x"
        else
          padding="$padding_y"
        fi
        echo "window_padding_width ${padding}"
      fi
      # Reset variables after use
      padding_x=""
      padding_y=""
    else
      # Pass through other lines untouched
      echo "$line"
    fi
  done

  # Output collected font features at the end if not already output
  if [[ -n "$font_features" ]]; then
    echo "font_features $font_features"
  fi
}

# Function to pass through without conversion
pass_through() {
  cat -
}

print_usage() {
  echo "Usage: $0 --from [kitty|ghostty] --to [kitty|ghostty]" >&2
  echo "  - Reads from stdin, writes to stdout" >&2
  echo "  - Use --supported to list supported formats" >&2
  exit 1
}

main "$@"
