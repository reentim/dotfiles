#!/usr/bin/env ruby # --disable-gems

require 'pry'

class Splitter
  FILETYPES = {
    'vimrc' => :vim,
    'tmux.conf' => :tmux,
  }

  def self.run(filepath)
    new(filepath).main
  end

  def initialize(filepath)
    @filetype = filetype(filepath)
    @lines = File.readlines(filepath).map { |line| Line.new(line, filepath) }
    @chunks = []
    @comments = []
  end

  def main
    until @lines.empty? do
      line = @lines.shift

      if line.comment?
        @comments << line
      elsif line.newline?
        @chunks << Chunk.new(comments: @comments, ft: @filetype) if @comments.any?
        @comments = []
      elsif line.source?
        @chunks << Chunk.new(comments: @comments, source: line, ft: @filetype)
      end
    end

    @chunks.sort.map.with_index do |chunk, i|
      chunk.to_s + "\n" if chunk.ends_block?(@chunks[i])
    end

    binding.pry
  end
end

def filetype(filepath)
  filename = File.basename(filepath)
  Splitter::FILETYPES.fetch(filename.sub(/^\./, ''), File.extname(filepath))
end

class Line
  attr_reader :line

  FILETYPE_REGEX = {
    vim: /^\"\s/,
    tmux: /^\#\s/,
  }

  def initialize(line, filepath)
    @line = line
    @filepath = filepath
    @filetype = filetype(filepath)
  end

  def same_cmd?(other_line)
    [line, other_line].all?(&:source?) && line.cmd == other_line.cmd
  end

  def cmd
    line.match(/^\S+/)
  end

  def to_s
    @line
  end

  def source?
    !comment? && !newline?
  end

  def newline?
    @line.match?(/^\n$/)
  end

  def comment?
    regex = FILETYPE_REGEX.fetch(@filetype)

    @line.match?(regex)
  end
end

class Chunk
  attr_reader :source

  def initialize(comments: [], source: nil, ft:)
    @comments = comments
    @source = source
    @ft = ft
  end

  def to_s
    @_string ||= [@comments.map(&:to_s), @source].join
  end

  def ends_block?(prev_chunk)
    @souce.nil? || !@source.same_cmd?(prev_chunk.source)
  end

  def sort_val
    to_s.sub(Line::FILETYPE_REGEX.fetch(@ft), '')
  end

  def <=>(other)
    sort_val <=> other.sort_val
  end
end

Splitter.run(ARGV[0]) if ARGV.any?
