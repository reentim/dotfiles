#!/usr/bin/env bash

ahead_bg="green"
ahead_fg="darkgreen"
ahead_style="bold"
behind_bg="red"
behind_fg="darkred"
behind_style="bold"
commit_age_bg="default"
commit_age_fg="default"
commit_id_bg="yellow"
commit_id_fg="brown"
default_bg="default"
default_fg="default"
upstream_bg="blue"
upstream_fg="darkblue"

ARROW_LEFT=""
ARROW_RIGHT=""
BRANCH_ICON=""
COMMIT_AGE_ICON=""
INVERSE_ARROW_LEFT=""
INVERSE_ARROW_RIGHT=""
LOWER_LEFT_TRIANGLE=""
LOWER_RIGHT_TRIANGLE=""
TERSE_COMMIT_AGE=true
UPPER_LEFT_TRIANGLE=""
UPPER_RIGHT_TRIANGLE=""

COMMIT_ID_SEPERATOR_LEFT="${ARROW_LEFT}"
COMMIT_ID_SEPERATOR_RIGHT="${ARROW_RIGHT}"

main() {
  local dir="${1}"

  git_dir="$(git -C "${dir}" rev-parse --path-format=absolute --git-dir 2>/dev/null)"
  if ! [[ -d "${git_dir}" ]]; then
    exit 1
  fi

  mapfile -t git_fields < <(git \
    --git-dir="$git_dir" \
    --no-pager \
    for-each-ref \
    --count=1 \
    --points-at=HEAD \
    --format="\
%(objectname:short)
%(committerdate:relative)
%(if)%(upstream)%(then)\
%(push:track)
%(upstream:short)
%(end)\
")

  local commit_id="${git_fields[0]}"
  local ahead_behind="${git_fields[2]}"
  local upstream="${git_fields[3]}"

  time_ago=${git_fields[1]}
  for unit in "second s" "minute m" "hour h" "day d" "year y"; do
    set -- $unit
    time_ago=${time_ago// $1 ago/ $2}
    time_ago=${time_ago// ${1}s ago/ $2}
  done
  printf -v terse_commit_age "%s" "$time_ago"

  local ahead_count=0
  local behind_count=0

  if [[ "$ahead_behind" =~ , ]]; then
    ahead_count="${BASH_REMATCH[1]}"
    behind_count="${BASH_REMATCH[2]}"
  elif [[ "$ahead_behind" =~ ahead\ ([0-9]+) ]]; then
    ahead_count="${BASH_REMATCH[1]}"
  elif [[ "$ahead_behind" =~ behind\ ([0-9]+) ]]; then
    behind_count="${BASH_REMATCH[1]}"
  fi

  generate_powerline "$commit_id" "$terse_commit_age" "$ahead_count" "$behind_count" "$upstream"
}

generate_powerline() {
  local commit_id="$1"
  local commit_age="$2"
  local ahead_count="$3"
  local behind_count="$4"
  local upstream="$5"

  local output=""

  output+="#[fg=${commit_id_bg},bg=${default_bg}]${COMMIT_ID_SEPERATOR_LEFT}"
  output+="#[fg=${commit_id_fg},bg=${commit_id_bg},bold] ${commit_id} "
  output+="#[fg=${commit_id_bg},bg=${commit_age_bg},nobold]${COMMIT_ID_SEPERATOR_RIGHT}"

  output+="#[fg=${commit_age_fg}]"
  output+="#[fg=${commit_age_fg},bg=${commit_age_bg}] ${COMMIT_AGE_ICON} ${commit_age} "

  if [[ $behind_count -gt 0 ]]; then
    output+="#[fg=${behind_fg},bold]-${behind_count}"
  fi

  if [[ -n "$upstream" ]]; then
    output+="#[fg=${upstream_bg},bg=${commit_age_bg}]${ARROW_LEFT}"
    output+="#[fg=${upstream_bg},bg=${commit_age_bg}]"
    output+="#[fg=${upstream_fg},bg=${upstream_bg},bold] ${BRANCH_ICON} ${upstream} "

    if [[ $ahead_count -gt 0 ]]; then
      output+="#[fg=${upstream_bg},bg=${ahead_bg}]${ARROW_RIGHT}"
      output+="#[fg=${ahead_fg},bg=${ahead_bg},bold] ${ahead_count}"
      output+="#[fg=${ahead_bg},bg=default,nobold]${ARROW_RIGHT}"
    fi

  fi

  output+="#[default]"

  echo -e "$output"
}

main "$1"
