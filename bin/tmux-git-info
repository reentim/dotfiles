#!/usr/bin/env bash

ahead_bg="green"
ahead_fg="darkgreen"
ahead_style="bold"

behind_bg="red"
behind_fg="darkred"
behind_style="bold"

commit_age_bg="default"
commit_age_fg="default"
commit_age_style="nobold"

commit_id_bg="yellow"
commit_id_fg="brown"
commit_id_style="bold"

default_bg="default"
default_fg="default"

upstream_bg="blue"
upstream_fg="darkblue"
upstream_style="bold"

arrow_left=""
arrow_right=""
circle_left=""
circle_right=""
icon_commit_age=""
icon_upstream=""

main() {
  declare git_dir="$(git -C "${1}" rev-parse --path-format=absolute --git-dir 2>/dev/null)"

  declare ahead_count
  declare ahead_count_segment
  declare behind_count
  declare behind_count_segment
  declare commit_age
  declare commit_age_segment
  declare commit_id
  declare commit_id_segment
  declare upstream
  declare upstream_segment

  local -a powerline

  build_segments

  powerline=(
    $commit_id_segment
    $commit_age_segment
    $behind_count_segment
    $upstream_segment
    $ahead_count_segment
    "#[default]"
  )

  echo -e "${powerline[@]}"
}

build_segments() {
  load_git_data

  commit_id_segment+="#[fg=${commit_id_bg},bg=${default_bg}]${circle_left}"
  commit_id_segment+="#[fg=${commit_id_fg},bg=${commit_id_bg},${commit_id_style}]${commit_id}"
  commit_id_segment+="#[fg=${commit_id_bg},bg=${commit_age_bg}]${circle_right}"

  commit_age_segment+="#[fg=${commit_age_fg},bg=${commit_age_bg},${commit_age_style}]${icon_commit_age} ${commit_age} "

  if [[ -n "$upstream" ]]; then
    if [[ $behind_count -gt 0 ]]; then
      behind_count_segment+="#[fg=${behind_bg},bg=${default_bg}]${arrow_left}"
      behind_count_segment+="#[fg=${behind_fg},bg=${behind_bg},${behind_style}]${behind_count}"
      upstream_segment+="#[fg=${upstream_bg},bg=${behind_bg}]${circle_left}"
    else
      upstream_segment+="#[fg=${upstream_bg},bg=${default_bg}]${circle_left}"
    fi

    upstream_segment+="#[fg=${upstream_fg},bg=${upstream_bg},${upstream_style}]${icon_upstream}${upstream}"

    if [[ $ahead_count -gt 0 ]]; then
      upstream_segment+="#[fg=${upstream_bg},bg=${ahead_bg}]${circle_right}"
      ahead_count_segment+="#[fg=${ahead_fg},bg=${ahead_bg},${ahead_style}]${ahead_count}"
      ahead_count_segment+="#[fg=${ahead_bg},bg=${default_bg}]${arrow_right}"
    else
      upstream_segment+="#[fg=${upstream_bg},bg=${default_bg}]${circle_right}"
    fi
  fi
}

load_git_data() {
  local -a git_fields

  if ! [[ -d "${git_dir}" ]]; then
    exit 1
  fi

  mapfile -t git_fields < <(\
    git \
      --git-dir="$git_dir" \
      --no-pager \
      for-each-ref \
        --count=1 \
        --points-at=HEAD \
        --format="\
%(objectname:short)
%(committerdate:relative)
%(if)%(upstream)%(then)\
%(push:track)
%(upstream:short)
%(end)\
")

  commit_id="${git_fields[0]}"
  commit_age=${git_fields[1]}
  ahead_behind="${git_fields[2]}"
  upstream="${git_fields[3]}"

  ahead_count=0
  behind_count=0

  for unit in "second sec" "minute min" "hour hr" "day days" "year yr"; do
    set -- $unit
    commit_age=${commit_age// $1 ago/ $2}
    commit_age=${commit_age// ${1}s ago/ $2}
  done
  printf -v terse_commit_age "%s" "$commit_age"

  echo $ahead_behind

  if [[ "$ahead_behind" =~ ahead\ ([0-9]+),\ behind\ ([0-9]+) ]]; then
    ahead_count="${BASH_REMATCH[1]}"
    behind_count="${BASH_REMATCH[2]}"
  elif [[ "$ahead_behind" =~ ahead\ ([0-9]+) ]]; then
    ahead_count="${BASH_REMATCH[1]}"
  elif [[ "$ahead_behind" =~ behind\ ([0-9]+) ]]; then
    behind_count="${BASH_REMATCH[1]}"
  fi
}

main "$1"
