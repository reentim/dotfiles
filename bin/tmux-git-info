#!/usr/bin/env bash

ahead_fg="green"
ahead_style="bold"
behind_fg="red"
behind_style="bold"
commit_id_bg="yellow"
commit_id_fg="brown"
date_bg="black"
date_fg="default"
default_bg="default"
default_fg="default"
upstream_bg="brightblack"
upstream_fg="blue"

ARROW_RIGHT=""
ARROW_LEFT=""
COMMIT_TIME_AGO_ICON=" "

main() {
  local dir="${1}"

  git_dir="$(git -C "${dir}" rev-parse --path-format=absolute --git-dir 2>/dev/null)"
  if ! [[ -d "${git_dir}" ]]; then
    exit 1
  fi

  mapfile -t git_fields < <(git \
    --git-dir="$git_dir" \
    --no-pager \
    for-each-ref \
    --count=1 \
    --points-at=HEAD \
    --format="\
%(objectname:short)
%(committerdate:relative)
%(if)%(upstream)%(then)\
%(ahead-behind:@{push})
%(upstream:short)
%(end)\
")

  local commit_id="${git_fields[0]}"
  local ahead_behind="${git_fields[2]}"
  local upstream="${git_fields[3]}"

  time_val=${git_fields[1]}
  time_val=${time_val//hours ago/h}
  time_val=${time_val//minutes ago/m}
  time_val=${time_val//seconds ago/s}
  printf -v terse_commit_time_ago "%4s" "$time_val"

  local ahead_count=0
  local behind_count=0

  if [[ "$ahead_behind" =~ \[ahead\ ([0-9]+),\ behind\ ([0-9]+)\] ]]; then
    ahead_count="${BASH_REMATCH[1]}"
    behind_count="${BASH_REMATCH[2]}"
  elif [[ "$ahead_behind" =~ \[ahead\ ([0-9]+)\] ]]; then
    ahead_count="${BASH_REMATCH[1]}"
  elif [[ "$ahead_behind" =~ \[behind\ ([0-9]+)\] ]]; then
    behind_count="${BASH_REMATCH[1]}"
  fi

  generate_powerline "$commit_id" "$terse_commit_time_ago" "$ahead_count" "$behind_count" "$upstream"
}

generate_powerline() {
  local commit_id="$1"
  local commit_time="$2"
  local ahead_count="$3"
  local behind_count="$4"
  local upstream="$5"

  local output=""

  output+="#[fg=${commit_id_bg},bg=${default_bg}]${ARROW_LEFT}"
  output+="#[fg=${commit_id_fg},bg=${commit_id_bg},bold] ${commit_id} "
  output+="#[fg=${commit_id_bg},bg=${date_bg},nobold]${ARROW_RIGHT}"

  output+="#[fg=${date_fg}]"
  output+="#[fg=${date_fg},bg=${date_bg}] ${COMMIT_TIME_AGO_ICON}${commit_time} "

  if [[ $behind_count -gt 0 ]]; then
    output+="#[fg=${behind_fg},bold]-${behind_count}"
  fi

  # Upstream segment (if exists)
  if [[ -n "$upstream" ]]; then
    output+="#[fg=${upstream_bg},bg=${date_bg}]${ARROW_LEFT}"
    output+="#[fg=${upstream_bg},bg=${date_bg}]"
    output+="#[fg=${upstream_fg},bg=${upstream_bg},bold] ${upstream} "

    # Ahead count segment (if non-zero)
    if [[ $ahead_count -gt 0 ]]; then
      output+="#[fg=${ahead_fg},bold]+${ahead_count} "
    fi

    output+="#[fg=${upstream_bg},bg=${default_bg}]${ARROW_RIGHT}"
  fi

  # Reset colors
  output+="#[default]"

  echo -e "$output"
}

main "$1"
