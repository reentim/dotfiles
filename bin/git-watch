#!/usr/bin/env ruby

require 'io/console'

# TODO:
# - use all available lines: hide cursor from bottom line
# - the first line should always be shown, never pushed above top of screen due to line wrapping

class GitWatch
  def initialize
    abort "fatal: can't find .git/HEAD" unless File.exists?(".git/HEAD")

    @cmd = ARGV[0]
    abort "fatal: git command required. Supported: #{cmds.join(",\s")}." if @cmd.nil?
    abort "fatal: '#{@cmd}' not supported." unless cmds.include?(@cmd)

    win_size
    main
  end

  def main
    while true do
      draw if changes?
      sleep 0.1
    end
  rescue Interrupt
    exit
  end

  def draw
    case @cmd
    when 'log'
      puts trim(%x[git log --color=always --oneline --graph --decorate])
    when 'reflog'
      puts trim(%x[git reflog --color=always --decorate])
    end
  end

  def trim(shell)
    shell.lines.map {|l| l[0..@win_size[:width]]}.first(@win_size[:height])
  end

  def win_size
    size = IO.console.winsize.map { |i| i - 1 }
    @win_size = { height: size[0], width: size[1] }
  end

  def changes?
    [
      @prev_mtimes != mtimes,
      @win_size[:height] != win_size[:height],
      @win_size[:width] != win_size[:width],
    ].any?
  end

  def mtimes
    @prev_mtimes = %w[HEAD ORIG_HEAD MERGE_RR].map do |name|
      file = File.join(".git", name)
      File.exists?(file) && File.mtime(file)
    end
  end

  def cmds
    %w[
      log
      reflog
    ]
  end
end

GitWatch.new
