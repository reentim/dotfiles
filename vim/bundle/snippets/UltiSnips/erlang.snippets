# module and export all
snippet mod "mod" w
-module(${1:`!v Filename('', 'my')`}).
-compile([export_all]).
start() ->
    ${2}
stop() ->
    ok.
endsnippet

# define directive
snippet def "def" w
-define(${1:macro}, ${2:body}).${3}
endsnippet

# export directive
snippet exp "exp" w
-export([${1:function}/${2:arity}]).
endsnippet

# include directive
snippet inc "inc" w
-include("${1:file}").${2}
endsnippet

# behavior directive
snippet beh "beh" w
-behaviour(${1:behaviour}).${2}
endsnippet

# if expression
snippet if "if" w
if
    ${1:guard} ->
        ${2:body}
end
endsnippet

# case expression
snippet case "case" w
case ${1:expression} of
    ${2:pattern} ->
        ${3:body};
end
endsnippet

# anonymous function
snippet fun "fun" w
fun (${1:Parameters}) -> ${2:body} end${3}
endsnippet

# try...catch
snippet try "try" w
try
    ${1}
catch
    ${2:_:_} -> ${3:got_some_exception}
end
endsnippet

# record directive
snippet rec "rec" w
-record(${1:record}, {
    ${2:field}=${3:value}}).${4}
endsnippet

# todo comment
snippet todo "todo" w
%% TODO: ${1}
endsnippet

## Snippets below (starting with '%') are in EDoc format.
## See http://www.erlang.org/doc/apps/edoc/chapter.html#id56887 for more details
# doc comment
snippet %d "%d" w
%% @doc ${1}
endsnippet

# end of doc comment
snippet %e "%e" w
%% @end
endsnippet

# specification comment
snippet %s "%s" w
%% @spec ${1}
endsnippet

# private function marker
snippet %p "%p" w
%% @private
endsnippet

# OTP application
snippet application "application" w
-module(${1:`!v Filename('', 'my')`}).
-behaviour(application).
-export([start/2, stop/1]).
start(_Type, _StartArgs) ->
    case ${2:root_supervisor}:start_link() of
        {ok, Pid} ->
            {ok, Pid};
        Other ->
	          {error, Other}
    end.
stop(_State) ->
    ok.	
endsnippet

# OTP supervisor
snippet supervisor "supervisor" w
-module(${1:`!v Filename('', 'my')`}).
-behaviour(supervisor).
%% API
-export([start_link/0]).
%% Supervisor callbacks
-export([init/1]).
-define(SERVER, ?MODULE).
start_link() ->
    supervisor:start_link({local, ?SERVER}, ?MODULE, []).
init([]) ->
    Server = {${2:my_server}, {$2, start_link, []},
      permanent, 2000, worker, [$2]},
    Children = [Server],
    RestartStrategy = {one_for_one, 0, 1},
    {ok, {RestartStrategy, Children}}.
endsnippet

# OTP gen_server
snippet gen_server "gen_server" w
-module(${1:`!v Filename('', 'my')`}).
-behaviour(gen_server).
%% API
-export([
         start_link/0
        ]).
%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3]).
-define(SERVER, ?MODULE).
-record(state, {}).
%%%===================================================================
%%% API
%%%===================================================================
start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).
%%%===================================================================
%%% gen_server callbacks
%%%===================================================================
init([]) ->
    {ok, #state{}}.
handle_call(_Request, _From, State) ->
    Reply = ok,
    {reply, Reply, State}.
handle_cast(_Msg, State) ->
    {noreply, State}.
handle_info(_Info, State) ->
    {noreply, State}.
terminate(_Reason, _State) ->
    ok.
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.
%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet


