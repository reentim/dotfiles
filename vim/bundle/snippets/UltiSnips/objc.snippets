# #import <...>
snippet Imp "Imp" w
#import <${1:Cocoa/Cocoa.h}>${2}
endsnippet

# #import "..."
snippet imp "imp" w
#import "${1:`!v Filename()`.h}"${2}
endsnippet

# @selector(...)
snippet sel "sel" w
@selector(${1:method}:)${3}
endsnippet

# @"..." string
snippet s "s" w
@"${1}"${2}
endsnippet

# Object
snippet o "o" w
${1:NSObject} *${2:foo} = [${3:$1 alloc}]${4};${5}
endsnippet

# NSLog(...)
snippet log "log" w
NSLog(@"${1:%@}"${2});${3}
endsnippet

# Class
snippet objc "objc" w
@interface ${1:`!v Filename('', 'someClass')`} : ${2:NSObject}
{
}
@end
@implementation $1
${3}
@end
endsnippet

# Class Interface
snippet int "int" w
@interface ${1:`!v Filename('', 'someClass')`} : ${2:NSObject}
{${3}
}
${4}
@end
endsnippet

snippet @interface "@interface" w
@interface ${1:`!v Filename('', 'someClass')`} : ${2:NSObject}
{${3}
}
${4}
@end
endsnippet

# Class Implementation
snippet impl "impl" w
@implementation ${1:`!v Filename('', 'someClass')`}
${2}
@end
endsnippet

snippet @implementation "@implementation" w
@implementation ${1:`!v Filename('', 'someClass')`}
${2}
@end
endsnippet

# Protocol
snippet pro "pro" w
@protocol ${1:`!v Filename('$1Delegate', 'MyProtocol')`} ${2:<NSObject>}
${3}
@end
endsnippet

snippet @protocol "@protocol" w
@protocol ${1:`!v Filename('$1Delegate', 'MyProtocol')`} ${2:<NSObject>}
${3}
@end
endsnippet

# init Definition
snippet init "init" w
- (id)init
{
	if (self = [super init]) {
		${1}
	}
	return self;
}
endsnippet

# dealloc Definition
snippet dealloc "dealloc" w
- (void) dealloc
{
	${1:deallocations}
	[super dealloc];
}
endsnippet

snippet su "su" w
[super ${1:init}]${2}
endsnippet

snippet ibo "ibo" w
IBOutlet ${1:NSSomeClass} *${2:$1};${3}
endsnippet

# Category
snippet cat "cat" w
@interface ${1:NSObject} (${2:MyCategory})
@end
@implementation $1 ($2)
${3}
@end
endsnippet

# Category Interface
snippet cath "cath" w
@interface ${1:`!v Filename('$1', 'NSObject')`} (${2:MyCategory})
${3}
@end
endsnippet

# Method
snippet m "m" w
- (${1:id})${2:method}
{
	${3}
}
endsnippet

# Method declaration
snippet md "md" w
- (${1:id})${2:method};${3}
endsnippet

# IBAction declaration
snippet ibad "ibad" w
- (IBAction)${1:method}:(${2:id})sender;${3}
endsnippet

# IBAction method
snippet iba "iba" w
- (IBAction)${1:method}:(${2:id})sender
{
	${3}
}
endsnippet

# awakeFromNib method
snippet wake "wake" w
- (void)awakeFromNib
{
	${1}
}
endsnippet

# Class Method
snippet M "M" w
+ (${1:id})${2:method}
{
	${3:return nil;}
}
endsnippet

# Sub-method (Call super)
snippet sm "sm" w
- (${1:id})${2:method}
{
	[super $2];${3}
	return self;
}
endsnippet

# Accessor Methods For:
# Object
snippet objacc "objacc" w
- (${1:id})${2:thing}
{
	return $2;
}
- (void)set$2:($1)${3:new$2}
{
	[$3 retain];
	[$2 release];
	$2 = $3;
}${4}
endsnippet

# for (object in array)
snippet forin "forin" w
for (${1:Class} *${2:some$1} in ${3:array}) {
	${4}
}
endsnippet

snippet fore "fore" w
for (${1:object} in ${2:array}) {
	${3:statements}
}
endsnippet

snippet forarray "forarray" w
unsigned int ${1:object}Count = [${2:array} count];
for (unsigned int index = 0; index < $1Count; index++) {
	${3:id} $1 = [$2 $1AtIndex:index];
	${4}
}
endsnippet

snippet fora "fora" w
unsigned int ${1:object}Count = [${2:array} count];
for (unsigned int index = 0; index < $1Count; index++) {
	${3:id} $1 = [$2 $1AtIndex:index];
	${4}
}
endsnippet

# Try / Catch Block
snippet @catch "@catch" w
@catch (${1:exception}) {
	${2:handler}
}
endsnippet

snippet @finally "@finally" w
@finally {
	${1:statements}
}
endsnippet

# IBOutlet
# @property (Objective-C 2.0)
snippet prop "prop" w
@property (${1:retain}) ${2:NSSomeClass} ${3:*$2};${4}
endsnippet

# @synthesize (Objective-C 2.0)
snippet syn "syn" w
@synthesize ${1:property};${2}
endsnippet

# [[ alloc] init]
snippet alloc "alloc" w
[[${1:foo} alloc] init${2}];${3}
endsnippet

snippet a "a" w
[[${1:foo} alloc] init${2}];${3}
endsnippet

# retain
snippet ret "ret" w
[${1:foo} retain];${2}
endsnippet

# release
snippet rel "rel" w
[${1:foo} release];
endsnippet

# autorelease
snippet arel "arel" w
[${1:foo} autorelease];
endsnippet

# autorelease pool
snippet pool "pool" w
NSAutoreleasePool *${1:pool} = [[NSAutoreleasePool alloc] init];
${2:/* code */}
[$1 drain];
endsnippet

# Throw an exception
snippet except "except" w
NSException *${1:badness};
$1 = [NSException exceptionWithName:@"${2:$1Name}"
                             reason:@"${3}"
                           userInfo:nil];
[$1 raise];
endsnippet

snippet prag "prag" w
#pragma mark ${1:-}
endsnippet

snippet cl "cl" w
@class ${1:Foo};${2}
endsnippet

snippet color "color" w
[[NSColor ${1:blackColor}] set];
endsnippet

# NSArray
snippet array "array" w
NSMutableArray *${1:array} = [NSMutable array];${2}
endsnippet

snippet nsa "nsa" w
NSArray ${1}
endsnippet

snippet nsma "nsma" w
NSMutableArray ${1}
endsnippet

snippet aa "aa" w
NSArray * array;${1}
endsnippet

snippet ma "ma" w
NSMutableArray * array;${1}
endsnippet

# NSDictionary
snippet dict "dict" w
NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];${2}
endsnippet

snippet nsd "nsd" w
NSDictionary ${1}
endsnippet

snippet nsmd "nsmd" w
NSMutableDictionary ${1}
endsnippet

# NSString
snippet nss "nss" w
NSString ${1}
endsnippet

snippet nsms "nsms" w
NSMutableString ${1}
endsnippet


