# cs.snippets
# ===========
# 
# Standard C-Sharp snippets for snipmate.
#
# Largely ported over from Visual Studio 2010 snippets plus
# a few snippets from Resharper plus a few widely known snippets.
#
# Most snippets on elements (i.e. classes, properties) 
# follow suffix conventions. The order of suffixes to a snippet
# is fixed.
#
# Snippet Suffix Order
# --------------------
# 1. Access Modifiers
# 2. Class Modifiers
#
# Access Modifier Suffix Table
# ----------------------------
# + = public
# & = internal
# | = protected
# - = private
#
# Example: `cls&` expands to `internal class $1`.
# Access modifiers might be doubled to indicate
# different modifiers for get/set on properties.
# Example: `pb+-` expands to `public bool $1 { get; private set; }`
#
# Class Modifier Table
# --------------------
# ^ = static
# % = abstract
#
# Example: `cls|%` expands to `protected abstract class $1`
#
# On method and property snippets, you can directly set
# one of the common types int, string and bool, if desired,
# just by appending the type modifier.
#
# Type Modifier Table
# -------------------
# i = integer
# s = string
# b = bool
#
# Example: `pi+&` expands to `public int $1 { get; internal set; }`
#
# I'll most propably add more stuff in here like
# * List/Array constructio
# * Mostly used generics
# * Linq
# * Funcs, Actions, Predicates
# * Lambda
# * Events
#
# Feedback is welcome!
# 
# entry point
snippet sim "sim" w
public static int Main(string[] args) {
	${1}
	return 0;
} 
endsnippet

snippet simc "simc" w
public class Application {
	public static int Main(string[] args) {
		${1}
		return 0;
	}
}
endsnippet

# if condition
snippet if "if" w
if (${1}) {
	${2}
} 
endsnippet

snippet el "el" w
else {
	${1}
} 
endsnippet

snippet ifs "ifs" w
if (${1}) 
	${2}
endsnippet

# ternary conditional
snippet t "t" w
${1} ? ${2} : ${3}
endsnippet

snippet ? "?" w
${1} ? ${2} : ${3}
endsnippet

# do while loop
snippet do "do" w
do {
	${2}
} while (${1});
endsnippet

# while loop
snippet wh "wh" w
while (${1}) {
	${2}
}
endsnippet

# for loop
snippet for "for" w
for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++}) {
	${4}
}
endsnippet

# foreach
snippet fore "fore" w
foreach (var ${1:entry} in ${2}) {
	${3}
}
endsnippet

snippet foreach "foreach" w
foreach (var ${1:entry} in ${2}) {
	${3}
}
endsnippet

snippet each "each" w
foreach (var ${1:entry} in ${2}) {
	${3}
}
endsnippet

# interfaces
snippet interface "interface" w
public interface ${1:`!v Filename()`} {
	${2}
}
endsnippet

snippet if+ "if+" w
public interface ${1:`!v Filename()`} {
	${2}
}
endsnippet

# class bodies
snippet class "class" w
public class ${1:`!v Filename()`} {
	${2}
}
endsnippet

snippet cls "cls" w
${2:public} class ${1:`!v Filename()`} {
	${3}
}
endsnippet

snippet cls+ "cls+" w
public class ${1:`!v Filename()`} {
	${2}
}
endsnippet

snippet cls+^ "cls+^" w
public static class ${1:`!v Filename()`} {
	${2}
}
endsnippet

snippet cls& "cls&" w
internal class ${1:`!v Filename()`} {
	${2}
}
endsnippet

snippet cls&^ "cls&^" w
internal static class ${1:`!v Filename()`} {
	${2}
}
endsnippet

snippet cls| "cls|" w
protected class ${1:`!v Filename()`} {
	${2}
}
endsnippet

snippet cls|% "cls|%" w
protected abstract class ${1:`!v Filename()`} {
	${2}
}
endsnippet

# constructor
snippet ctor "ctor" w
public ${1:`!v Filename()`}() {
	${2}
}
endsnippet

# properties - auto properties by default.
# default type is int with layout get / set.
snippet prop "prop" w
${1:public} ${2:int} ${3:} { get; set; }${4}
endsnippet

snippet p "p" w
${1:public} ${2:int} ${3:} { get; set; }${4}
endsnippet

snippet p+ "p+" w
public ${1:int} ${2:} { get; set; }${3}
endsnippet

snippet p+& "p+&" w
public ${1:int} ${2:} { get; internal set; }${3}
endsnippet

snippet p+| "p+|" w
public ${1:int} ${2:} { get; protected set; }${3}
endsnippet

snippet p+- "p+-" w
public ${1:int} ${2:} { get; private set; }${3}
endsnippet

snippet p& "p&" w
internal ${1:int} ${2:} { get; set; }${3}
endsnippet

snippet p&| "p&|" w
internal ${1:int} ${2:} { get; protected set; }${3}
endsnippet

snippet p&- "p&-" w
internal ${1:int} ${2:} { get; private set; }${3}
endsnippet

snippet p| "p|" w
protected ${1:int} ${2:} { get; set; }${3}
endsnippet

snippet p|- "p|-" w
protected ${1:int} ${2:} { get; private set; }${3}
endsnippet

snippet p- "p-" w
private ${1:int} ${2:} { get; set; }${3}
endsnippet

# property - bool
snippet pi "pi" w
${1:public} int ${2:} { get; set; }${3}
endsnippet

snippet pi+ "pi+" w
public int ${1} { get; set; }${2}
endsnippet

snippet pi+& "pi+&" w
public int ${1} { get; internal set; }${2}
endsnippet

snippet pi+| "pi+|" w
public int ${1} { get; protected set; }${2}
endsnippet

snippet pi+- "pi+-" w
public int ${1} { get; private set; }${2}
endsnippet

snippet pi& "pi&" w
internal int ${1} { get; set; }${2}
endsnippet

snippet pi&| "pi&|" w
internal int ${1} { get; protected set; }${2}
endsnippet

snippet pi&- "pi&-" w
internal int ${1} { get; private set; }${2}
endsnippet

snippet pi| "pi|" w
protected int ${1} { get; set; }${2}
endsnippet

snippet pi|- "pi|-" w
protected int ${1} { get; private set; }${2}
endsnippet

snippet pi- "pi-" w
private int ${1} { get; set; }${2}
endsnippet

# property - bool
snippet pb "pb" w
${1:public} bool ${2:} { get; set; }${3}
endsnippet

snippet pb+ "pb+" w
public bool ${1} { get; set; }${2}
endsnippet

snippet pb+& "pb+&" w
public bool ${1} { get; internal set; }${2}
endsnippet

snippet pb+| "pb+|" w
public bool ${1} { get; protected set; }${2}
endsnippet

snippet pb+- "pb+-" w
public bool ${1} { get; private set; }${2}
endsnippet

snippet pb& "pb&" w
internal bool ${1} { get; set; }${2}
endsnippet

snippet pb&| "pb&|" w
internal bool ${1} { get; protected set; }${2}
endsnippet

snippet pb&- "pb&-" w
internal bool ${1} { get; private set; }${2}
endsnippet

snippet pb| "pb|" w
protected bool ${1} { get; set; }${2}
endsnippet

snippet pb|- "pb|-" w
protected bool ${1} { get; private set; }${2}
endsnippet

snippet pb- "pb-" w
private bool ${1} { get; set; }${2}
endsnippet

# property - string
snippet ps "ps" w
${1:public} string ${2:} { get; set; }${3}
endsnippet

snippet ps+ "ps+" w
public string ${1} { get; set; }${2}
endsnippet

snippet ps+& "ps+&" w
public string ${1} { get; internal set; }${2}
endsnippet

snippet ps+| "ps+|" w
public string ${1} { get; protected set; }${2}
endsnippet

snippet ps+- "ps+-" w
public string ${1} { get; private set; }${2}
endsnippet

snippet ps& "ps&" w
internal string ${1} { get; set; }${2}
endsnippet

snippet ps&| "ps&|" w
internal string ${1} { get; protected set; }${2}
endsnippet

snippet ps&- "ps&-" w
internal string ${1} { get; private set; }${2}
endsnippet

snippet ps| "ps|" w
protected string ${1} { get; set; }${2}
endsnippet

snippet ps|- "ps|-" w
protected string ${1} { get; private set; }${2}
endsnippet

snippet ps- "ps-" w
private string ${1} { get; set; }${2}
endsnippet

# members - void
snippet m "m" w
${1:public} ${2:void} ${3:}(${4:}) {
	${5:}
}
endsnippet

snippet m+ "m+" w
public ${1:void} ${2:}(${3:}) {
	${4:}
}
endsnippet

snippet m& "m&" w
internal ${1:void} ${2:}(${3:}) {
	${4:}
}
endsnippet

snippet m| "m|" w
protected ${1:void} ${2:}(${3:}) {
	${4:}
}
endsnippet

snippet m- "m-" w
private ${1:void} ${2:}(${3:}) {
	${4:}
}
endsnippet

# members - int
snippet mi "mi" w
${1:public} int ${2:}(${3:}) {
	${4:return 0;}
}
endsnippet

snippet mi+ "mi+" w
public int ${1:}(${2:}) {
	${3:return 0;}
}
endsnippet

snippet mi& "mi&" w
internal int ${1:}(${2:}) {
	${3:return 0;}
}
endsnippet

snippet mi| "mi|" w
protected int ${1:}(${2:}) {
	${3:return 0;}
}
endsnippet

snippet mi- "mi-" w
private int ${1:}(${2:}) {
	${3:return 0;}
}
endsnippet

# members - bool
snippet mb "mb" w
${1:public} bool ${2:}(${3:}) {
	${4:return false;}
}
endsnippet

snippet mb+ "mb+" w
public bool ${1:}(${2:}) {
	${3:return false;}
}
endsnippet

snippet mb& "mb&" w
internal bool ${1:}(${2:}) {
	${3:return false;}
}
endsnippet

snippet mb| "mb|" w
protected bool ${1:}(${2:}) {
	${3:return false;}
}
endsnippet

snippet mb- "mb-" w
private bool ${1:}(${2:}) {
	${3:return false;}
}
endsnippet

# members - string
snippet ms "ms" w
${1:public} string ${2:}(${3:}) {
	${4:return "";}
}
endsnippet

snippet ms+ "ms+" w
public string ${1:}(${2:}) {
	${3:return "";}
}
endsnippet

snippet ms& "ms&" w
internal string ${1:}(${2:}) {
	${3:return "";}
}
endsnippet

snippet ms| "ms|" w
protected string ${1:}(${2:}) {
	${3:return "";}
}
endsnippet

snippet ms- "ms-" w
private string ${1:}(${2:}) {
	${3:return "";}
}
endsnippet

# structure
snippet struct "struct" w
public struct ${1:`!v Filename()`} {
	${2}
}
endsnippet

# enumeration
snippet enum "enum" w
public enum ${1} {
	${2}
}
endsnippet

# preprocessor directives
snippet #if "#if" w
#if
	${1}
#endif
endsnippet

# inline xml documentation
snippet /// "///" w
/// <summary>
/// ${1}
/// </summary>
endsnippet

snippet <p "<p" w
<param name="${1}">${2:$1}</param>${3}
endsnippet

snippet <ex "<ex" w
<exception cref="${1:System.Exception}">${2}</exception>${3}
endsnippet

snippet <r "<r" w
<returns>${1}</returns>{${2}
endsnippet

snippet <s "<s" w
<see cref="${1}"/>${2}
endsnippet

snippet <rem "<rem" w
<remarks>${1}</remarks>${2}
endsnippet

snippet <c "<c" w
<code>${1}</code>${2}
endsnippet


