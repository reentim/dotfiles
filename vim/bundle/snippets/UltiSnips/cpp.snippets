## STL Collections
# std::array
snippet array "array" w
std::array<${1:T}, ${2:N}> ${3};${4}
endsnippet

# std::vector
snippet vector "vector" w
std::vector<${1:T}> ${2};${3}
endsnippet

# std::deque
snippet deque "deque" w
std::deque<${1:T}> ${2};${3}
endsnippet

# std::forward_list
snippet flist "flist" w
std::forward_list<${1:T}> ${2};${3}
endsnippet

# std::list
snippet list "list" w
std::list<${1:T}> ${2};${3}
endsnippet

# std::set
snippet set "set" w
std::set<${1:T}> ${2};${3}
endsnippet

# std::map
snippet map "map" w
std::map<${1:Key}, ${2:T}> ${3};${4}
endsnippet

# std::multiset
snippet mset "mset" w
std::multiset<${1:T}> ${2};${3}
endsnippet

# std::multimap
snippet mmap "mmap" w
std::multimap<${1:Key}, ${2:T}> ${3};${4}
endsnippet

# std::unordered_set
snippet uset "uset" w
std::unordered_set<${1:T}> ${2};${3}
endsnippet

# std::unordered_map
snippet umap "umap" w
std::unordered_map<${1:Key}, ${2:T}> ${3};${4}
endsnippet

# std::unordered_multiset
snippet umset "umset" w
std::unordered_multiset<${1:T}> ${2};${3}
endsnippet

# std::unordered_multimap
snippet ummap "ummap" w
std::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}
endsnippet

# std::stack
snippet stack "stack" w
std::stack<${1:T}> ${2};${3}
endsnippet

# std::queue
snippet queue "queue" w
std::queue<${1:T}> ${2};${3}
endsnippet

# std::priority_queue
snippet pqueue "pqueue" w
std::priority_queue<${1:T}> ${2};${3}
endsnippet

##
## Access Modifiers
# private
snippet pri "pri" w
private
endsnippet

# protected
snippet pro "pro" w
protected
endsnippet

# public
snippet pub "pub" w
public
endsnippet

# friend
snippet fr "fr" w
friend
endsnippet

# mutable
snippet mu "mu" w
mutable
endsnippet

## 
## Class
# class
snippet cl "cl" w
class ${1:`!v Filename('$1', 'name')`} 
{
public:
	$1(${2});
	~$1();
private:
	${3:/* data */}
};
endsnippet

# member function implementation
snippet mfun "mfun" w
${4:void} ${1:`!v Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
	${5:/* code */}
}
endsnippet

# namespace
snippet ns "ns" w
namespace ${1:`!v Filename('', 'my')`} {
	${2}
} /* namespace $1 */
endsnippet

##
## Input/Output
# std::cout
snippet cout "cout" w
std::cout << ${1} << std::endl;${2}
endsnippet

# std::cin
snippet cin "cin" w
std::cin >> ${1};${2}
endsnippet

##
## Iteration
# for i 
snippet fori "fori" w
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4:/* code */}
}${5}
endsnippet

# foreach
snippet fore "fore" w
for (${1:auto} ${2:i} : ${3:container}) {
	${4:/* code */}
}${5}
endsnippet

# iterator
snippet iter "iter" w
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}${7}
endsnippet

# auto iterator
snippet itera "itera" w
for (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {
	${2:std::cout << *$1 << std::endl;}
}${3}
endsnippet

##
## Lambdas
# lamda (one line)
snippet ld "ld" w
[${1}](${2}){${3:/* code */}}${4}
endsnippet

# lambda (multi-line)
snippet lld "lld" w
[${1}](${2}){
	${3:/* code */}
}${4}
endsnippet


