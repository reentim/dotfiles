# Snippets for use with VIM and http://www.vim.org/scripts/script.php?script_id=2540
#
# Please contact R.I.Pienaar <rip@devco.net> for additions and feedback, 
# see it in action @ http://www.devco.net/archives/2009/09/22/vim_and_puppet.php
# Language Constructs
snippet class "class" w
class ${1:`!v Filename('', 'name')`} {
	${2}
}
endsnippet

snippet node "node" w
node "${1:`!v Filename('', 'fqdn')`}" {
	${2}
}
endsnippet

snippet case "case" w
case $${1:variable} {
	default: { ${2} }
}
endsnippet

snippet ife "ife" w
if $${1:variable} {
	${2}
} else {
	${3}
}
endsnippet

snippet if "if" w
if $${1:variable} {
	${2}
} 
endsnippet

snippet else "else" w
else {
	${1}
}
endsnippet

snippet ? "?" w
? {
	'${1}'	=> ${2}
  }
endsnippet

# 
# blocks etc and general syntax sugar
snippet [ "[" w
[ ${1} ]${2}
endsnippet

snippet > ">" w
${1}	=> ${2}
endsnippet

snippet p: "p:" w
"puppet://puppet/${1:module name}/${2:file name}"
endsnippet

#
# Functions
snippet alert "alert" w
alert("${1:message}")${2}
endsnippet

snippet crit "crit" w
crit("${1:message}")${2}
endsnippet

snippet debug "debug" w
debug("${1:message}")${2}
endsnippet

snippet defined "defined" w
defined(${1:Resource}["${2:name}"])${3}
endsnippet

snippet emerg "emerg" w
emerg("${1:message}")${2}
endsnippet

snippet extlookup "Simple extlookup " w
extlookup("${1:variable}")${2}
endsnippet

snippet extlookup "Extlookup with defaults" w
extlookup("${1:variable}", "${2:default}")${3}
endsnippet

snippet extlookup "Extlookup with defaults and custom data file" w
extlookup("${1:variable}", "${2:default}", "${3:data source}")${4}
endsnippet

snippet fail "fail" w
fail("${1:message}")${2}
endsnippet

snippet info "info" w
info("${1:message}")${2}
endsnippet

snippet inline_template "inline_template" w
inline_template("<%= ${1} %>")${2}
endsnippet

snippet notice "notice" w
notice("${1:message}")${2}
endsnippet

snippet realize "realize" w
realize(${1:Resource}[${2:name}])${3}
endsnippet

snippet regsubst "regsubst" w
regsubst(${1:hay stack}, ${2:needle}, "${3:replacement}")${4}
endsnippet

snippet inc "inc" w
include ${1:classname}${2}
endsnippet

snippet split "split" w
split(${1:hay stack}, "${2:patten}")${3}
endsnippet

snippet versioncmp "versioncmp" w
versioncmp("${1:version}", "${2:version}")${3}
endsnippet

snippet warning "warning" w
warning("${1:message}")${2}
endsnippet

#
# Types
snippet cron "cron" w
cron{ "${1:name}":
	command	=> "${2}",
	user	=> "${3:root}",
	${4}	=> ${5}
}
endsnippet

snippet exec "exec" w
exec{ "${1:name}":
	command	=> "${2:$1}",
	user	=> "${3:root}",
	${4}	=> ${5}
}
endsnippet

snippet user "user" w
user{ "${1:user}":
	comment		=> "${2:$1}",
	ensure		=> present,
	managehome	=> true,
	home		=> "${3:/home/$1}"
}
endsnippet

snippet group "group" w
group{ "${1:group}":
	ensure	=> ${2:present}
}
endsnippet

snippet host "host" w
host{ "${1:hostname}":
	ip	=> ${2:127.0.0.1}
}
endsnippet

snippet mailalias "mailalias" w
mailalias{ "${1:localpart}":
	recipient	=> "${2:recipient}"
}
endsnippet

snippet mount "mount" w
mount{ "${1:destination path}":
	ensure	=> ${2:mounted},
	device	=> "${3:device name or path}"
}
endsnippet

snippet package "package" w
package{ "${1:package name}":
	ensure	=> ${2:present}
}
endsnippet

snippet yumrepo "yumrepo" w
yumrepo{ "${1:repo name}":
	descr	=> "${2:$1}",
	enabled	=> ${3:1}
}
endsnippet

snippet define "define" w
define ${1} (${2}) {
	${3}
}
endsnippet

snippet service "service" w
service{ "${1:service}":
	enable		=> ${2:true},
	ensure		=> ${3:running},
	hasstatus	=> true,
}
endsnippet

snippet file "file" w
file{ "${1:path}":
	${2}	=> ${3}
}
endsnippet


