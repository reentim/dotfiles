extends html

snippet php "php" w
<?php
	${1}
?>
endsnippet

snippet phpil "php inline" w
<?php ${1} ?>
endsnippet

snippet <? "<?" w
<?php
${1}
endsnippet

snippet ec "ec" w
echo ${1};
endsnippet

snippet <?e "<?e" w
<?php echo ${1} ?>
endsnippet

# this one is for php5.4
snippet <?= "<?=" w
<?=${1}?>
endsnippet

snippet ?= "?=" w
<?= ${1} ?>
endsnippet

snippet ? "?" w
<?php ${1} ?>
endsnippet

snippet ?f "?f" w
<?php foreach ($${1:vars} as $${2:$var}): ?>
	${3}
<?php endforeach ?>
endsnippet

snippet ?i "?i" w
<?php if ($${1:var}): ?>
	${2}
<?php endif ?>
endsnippet

snippet ns "ns" w
namespace ${1:Foo\Bar\Baz};
${2}
endsnippet

snippet use "use" w
use ${1:Foo\Bar\Baz};
${2}
endsnippet

snippet i "i" w
interface ${1:`!v Filename()`}
{
	${2}
}
endsnippet

snippet t. "t." w
$this->${1}
endsnippet

snippet f "f" w
function ${1:foo}(${2:array }${3:$bar})
{
	${4}
}
endsnippet

# method
snippet m "m" w
${1:protected} function ${2:foo}()
{
	${3}
}
endsnippet

# setter method
snippet sm "sm" w
/**
 * Sets the value of ${1:foo}
 *
 * @param ${2:$1} $$1 ${3:description}
 *
 * @return ${4:`!v Filename()`}
 */
${5:public} function set${6:$2}(${7:$2 }$$1)
{
	$this->${8:$1} = $$1;
	return $this;
}${9}
endsnippet

# getter method
snippet gm "gm" w
/**
 * Gets the value of ${1:foo}
 *
 * @return ${2:$1}
 */
${3:public} function get${4:$2}()
{
	return $this->${5:$1};
}${6}
endsnippet

#setter
snippet $s "$s" w
${1:$foo}->set${2:Bar}(${3});
endsnippet

#getter
snippet $g "$g" w
${1:$foo}->get${2:Bar}();
endsnippet

# Tertiary conditional
snippet =?: "=?:" w
$${1:foo} = ${2:true} ? ${3:a} : ${4};
endsnippet

snippet ?: "?:" w
${1:true} ? ${2:a} : ${3}
endsnippet

snippet C "C" w
$_COOKIE['${1:variable}']${2}
endsnippet

snippet E "E" w
$_ENV['${1:variable}']${2}
endsnippet

snippet F "F" w
$_FILES['${1:variable}']${2}
endsnippet

snippet G "G" w
$_GET['${1:variable}']${2}
endsnippet

snippet P "P" w
$_POST['${1:variable}']${2}
endsnippet

snippet R "R" w
$_REQUEST['${1:variable}']${2}
endsnippet

snippet S "S" w
$_SERVER['${1:variable}']${2}
endsnippet

snippet SS "SS" w
$_SESSION['${1:variable}']${2}
endsnippet

# the following are old ones
snippet inc "inc" w
include '${1:file}';${2}
endsnippet

snippet inc1 "inc1" w
include_once '${1:file}';${2}
endsnippet

snippet req "req" w
require '${1:file}';${2}
endsnippet

snippet req1 "req1" w
require_once '${1:file}';${2}
endsnippet

# Start Docblock
snippet /* "/*" w
/**
 * ${1}
 */
endsnippet

# Class - post doc
snippet doc_cp "doc_cp" w
/**
 * ${1:undocumented class}
 *
 * @package ${2:default}
 * @subpackage ${3:default}
 * @author ${4:`!v g:snips_author`}
 */${5}
endsnippet

# Class Variable - post doc
snippet doc_vp "doc_vp" w
/**
 * ${1:undocumented class variable}
 *
 * @var ${2:string}
 */${3}
endsnippet

# Class Variable
snippet doc_v "doc_v" w
/**
 * ${3:undocumented class variable}
 *
 * @var ${4:string}
 */
${1:var} $${2};${5}
endsnippet

# Class
snippet doc_c "doc_c" w
/**
 * ${3:undocumented class}
 *
 * @package ${4:default}
 * @subpackage ${5:default}
 * @author ${6:`!v g:snips_author`}
 */
${1:}class ${2:}
{
	${7}
} // END $1class $2
endsnippet

# Constant Definition - post doc
snippet doc_dp "doc_dp" w
/**
 * ${1:undocumented constant}
 */${2}
endsnippet

# Constant Definition
snippet doc_d "doc_d" w
/**
 * ${3:undocumented constant}
 */
define(${1}, ${2});${4}
endsnippet

# Function - post doc
snippet doc_fp "doc_fp" w
/**
 * ${1:undocumented function}
 *
 * @return ${2:void}
 * @author ${3:`!v g:snips_author`}
 */${4}
endsnippet

# Function signature
snippet doc_s "doc_s" w
/**
 * ${4:undocumented function}
 *
 * @return ${5:void}
 * @author ${6:`!v g:snips_author`}
 */
${1}function ${2}(${3});${7}
endsnippet

# Function
snippet doc_f "doc_f" w
/**
 * ${4:undocumented function}
 *
 * @return ${5:void}
 * @author ${6:`!v g:snips_author`}
 */
${1}function ${2}(${3})
{${7}
}
endsnippet

# Header
snippet doc_h "doc_h" w
/**
 * ${1}
 *
 * @author ${2:`!v g:snips_author`}
 * @version ${3:$Id$}
 * @copyright ${4:$2}, `!v strftime('%d %B, %Y')`
 * @package ${5:default}
 */
endsnippet

# Interface
snippet interface "interface" w
/**
 * ${2:undocumented class}
 *
 * @package ${3:default}
 * @author ${4:`!v g:snips_author`}
 */
interface ${1:`!v Filename()`}
{
	${5}
}
endsnippet

# class ...
snippet class "class" w
/**
 * ${1}
 */
class ${2:`!v Filename()`}
{
	${3}
	/**
	 * ${4}
	 */
	${5:public} function ${6:__construct}(${7:argument})
	{
		${8:// code...}
	}
}
endsnippet

snippet nc "nc" w
namespace ${1:`!v substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};
${2:abstract }class ${3:`!v Filename()`}
{
	${4}
}
endsnippet

# define(...)
snippet def "def" w
define('${1}'${2});${3}
endsnippet

# defined(...)
snippet def? "def?" w
${1}defined('${2}')${3}
endsnippet

snippet wh "wh" w
while (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

# do ... while
snippet do "do" w
do {
	${2:// code... }
} while (${1:/* condition */});
endsnippet

snippet if "if" w
if (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet ifil "ifil" w
<?php if (${1:/* condition */}): ?>
	${2:<!-- code... -->}
<?php endif; ?>
endsnippet

snippet ife "ife" w
if (${1:/* condition */}) {
	${2:// code...}
} else {
	${3:// code...}
}
${4}
endsnippet

snippet ifeil "ifeil" w
<?php if (${1:/* condition */}): ?>
	${2:<!-- html... -->}
<?php else: ?>
	${3:<!-- html... -->}
<?php endif; ?>
${4}
endsnippet

snippet else "else" w
else {
	${1:// code...}
}
endsnippet

snippet elseif "elseif" w
elseif (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet switch "switch" w
switch ($${1:variable}) {
	case '${2:value}':
		${3:// code...}
		break;
	${5}
	default:
		${4:// code...}
		break;
}
endsnippet

snippet case "case" w
case '${1:value}':
	${2:// code...}
	break;${3}
endsnippet

snippet for "for" w
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4: // code...}
}
endsnippet

snippet foreach "foreach" w
foreach ($${1:variable} as $${2:value}) {
	${3:// code...}
}
endsnippet

snippet foreachil "foreachil" w
<?php foreach ($${1:variable} as $${2:value}): ?>
	${3:<!-- html... -->}
<?php endforeach; ?>
endsnippet

snippet foreachk "foreachk" w
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${4:// code...}
}
endsnippet

snippet foreachkil "foreachkil" w
<?php foreach ($${1:variable} as $${2:key} => $${3:value}): ?>
	${4:<!-- html... -->}
<?php endforeach; ?>
endsnippet

# $... = array (...)
snippet array "array" w
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet try "try" w
try {
	${2}
} catch (${1:Exception} $e) {
}
endsnippet

# lambda with closure
snippet lambda "lambda" w
${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {
	${4}
};
endsnippet

# pre_dump();
snippet pd "pd" w
echo '<pre>'; var_dump(${1}); echo '</pre>';
endsnippet

# pre_dump(); die();
snippet pdd "pdd" w
echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${2:});
endsnippet

snippet vd "vd" w
var_dump(${1});
endsnippet

snippet vdd "vdd" w
var_dump(${1}); die(${2:});
endsnippet

snippet http_redirect "http_redirect" w
header ("HTTP/1.1 301 Moved Permanently");
header ("Location: ".URL);
exit();
endsnippet

# Getters & Setters
snippet gs "gs" w
/**
 * Gets the value of ${1:foo}
 *
 * @return ${2:$1}
 */
public function get${3:$2}()
{
	return $this->${4:$1};
}
/**
 * Sets the value of $1
 *
 * @param $2 $$1 ${5:description}
 *
 * @return ${6:`!v Filename()`}
 */
public function set$3(${7:$2 }$$1)
{
	$this->$4 = $$1;
	return $this;
}${8}
endsnippet

# anotation, get, and set, useful for doctrine
snippet ags "ags" w
/**
 * ${1:description}
 *
 * @${7}
 */
${2:protected} $${3:foo};
public function get${4:$3}()
{
	return $this->$3;
}
public function set$4(${5:$4 }$${6:$3})
{
	$this->$3 = $$6;
	return $this;
}
endsnippet

snippet rett "rett" w
return true;
endsnippet

snippet retf "retf" w
return false;
endsnippet

snippet am "am" w
$${1:foo} = array_map(function($${2:v}) {
	${3}
	return $$2;
}, $$1);
endsnippet

snippet aw "aw" w
array_walk($${1:foo}, function(&$${2:v}, $${3:k}) {
	$$2 = ${4};
});
endsnippet


