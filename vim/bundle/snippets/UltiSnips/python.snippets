snippet #! "#!" w
#!/usr/bin/env python
endsnippet

snippet imp "imp" w
import ${1:module}
endsnippet

snippet from "from" w
from ${1:package} import ${2:module}
endsnippet

# Module Docstring
snippet docs "docs" w
"""
File: ${1:`!v Filename('$1.py', 'foo.py')`}
Author: `!v g:snips_author`
Email: `!v g:snips_email`
Github: `!v g:snips_github`
Description: ${2}
"""
endsnippet

snippet wh "wh" w
while ${1:condition}:
	${2:# TODO: write code...}
endsnippet

# dowh - does the same as do...while in other languages
snippet dowh "dowh" w
while True:
	${1:# TODO: write code...}
	if ${2:condition}:
		break
endsnippet

snippet with "with" w
with ${1:expr} as ${2:var}:
	${3:# TODO: write code...}
endsnippet

# New Class
snippet cl "cl" w
class ${1:ClassName}(${2:object}):
	"""${3:docstring for $1}"""
	def __init__(self, ${4:arg}):
		${5:super($1, self).__init__()}
		self.$4 = $4
		${6}
endsnippet

# New Function
snippet def "def" w
def ${1:fname}(${2:`!v indent('.') ? 'self' : ''`}):
	"""${3:docstring for $1}"""
	${4:# TODO: write code...}
endsnippet

snippet deff "deff" w
def ${1:fname}(${2:`!v indent('.') ? 'self' : ''`}):
	${3:# TODO: write code...}
endsnippet

# New Method
snippet defs "defs" w
def ${1:mname}(self, ${2:arg}):
	${3:# TODO: write code...}
endsnippet

# New Property
snippet property "property" w
def ${1:foo}():
	doc = "${2:The $1 property.}"
	def fget(self):
		${3:return self._$1}
	def fset(self, value):
		${4:self._$1 = value}
	def fdel(self):
		${5:del self._$1}
	return locals()
$1 = property(**$1())
endsnippet

# Ifs
snippet if "if" w
if ${1:condition}:
	${2:# TODO: write code...}
endsnippet

snippet el "el" w
else:
	${1:# TODO: write code...}
endsnippet

snippet ei "ei" w
elif ${1:condition}:
	${2:# TODO: write code...}
endsnippet

# For
snippet for "for" w
for ${1:item} in ${2:items}:
	${3:# TODO: write code...}
endsnippet

# Encodes
snippet cutf8 "cutf8" w
# -*- coding: utf-8 -*-
endsnippet

snippet clatin1 "clatin1" w
# -*- coding: latin-1 -*-
endsnippet

snippet cascii "cascii" w
# -*- coding: ascii -*-
endsnippet

# Lambda
snippet ld "ld" w
${1:var} = lambda ${2:vars} : ${3:action}
endsnippet

snippet . "." w
self.
endsnippet

snippet try "Try/Except" w
try:
	${1:# TODO: write code...}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
endsnippet

snippet try "Try/Except/Else" w
try:
	${1:# TODO: write code...}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:# TODO: write code...}
endsnippet

snippet try "Try/Except/Finally" w
try:
	${1:# TODO: write code...}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
finally:
	${5:# TODO: write code...}
endsnippet

snippet try "Try/Except/Else/Finally" w
try:
	${1:# TODO: write code...}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:# TODO: write code...}
finally:
	${6:# TODO: write code...}
endsnippet

# if __name__ == '__main__':
snippet ifmain "ifmain" w
if __name__ == '__main__':
	${1:main()}
endsnippet

# __magic__
snippet _ "_" w
__${1:init}__${2}
endsnippet

# python debugger (pdb)
snippet pdb "pdb" w
import pdb; pdb.set_trace()
endsnippet

# ipython debugger (ipdb)
snippet ipdb "ipdb" w
import ipdb; ipdb.set_trace()
endsnippet

# ipython debugger (pdbbb)
snippet pdbbb "pdbbb" w
import pdbpp; pdbpp.set_trace()
endsnippet

snippet pprint "pprint" w
import pprint; pprint.pprint(${1})${2}
endsnippet

snippet " """ w
"""
${1:doc}
"""
endsnippet

# test function/method
snippet test "test" w
def test_${1:description}(${2:`!v indent('.') ? 'self' : ''`}):
	${3:# TODO: write code...}
endsnippet

# test case
snippet testcase "testcase" w
class ${1:ExampleCase}(unittest.TestCase):
	def test_${2:description}(self):
		${3:# TODO: write code...}
endsnippet

snippet fut "fut" w
from __future__ import ${1}
endsnippet

#getopt
snippet getopt "getopt" w
try:
	# Short option syntax: "hv:"
	# Long option syntax: "help" or "verbose="
	opts, args = getopt.getopt(sys.argv[1:], "${1:short_options}", [${2:long_options}])
except getopt.GetoptError, err:
	# Print debug info
	print str(err)
	${3:error_action}
for option, argument in opts:
	if option in ("-h", "--help"):
		${4}
	elif option in ("-v", "--verbose"):
		verbose = argument
endsnippet


