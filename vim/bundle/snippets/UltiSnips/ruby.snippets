########################################
# Ruby snippets - for Rails, see below #
########################################
# encoding for Ruby 1.9
snippet enc "enc" w
# encoding: utf-8
endsnippet

# #!/usr/bin/env ruby
snippet #! "#!" w
#!/usr/bin/env ruby
# encoding: utf-8
endsnippet

# New Block
snippet =b "=b" w
=begin rdoc
	${1}
=end
endsnippet

snippet y "y" w
:yields: ${1:arguments}
endsnippet

snippet rb "rb" w
#!/usr/bin/env ruby -wKU
endsnippet

snippet beg "beg" w
begin
	${3}
rescue ${1:Exception} => ${2:e}
end
endsnippet

snippet req "require" w
require "${1}"${2}
endsnippet

snippet reqr "reqr" w
require_relative "${1}"${2}
endsnippet

snippet # "#" w
# =>
endsnippet

snippet end "end" w
__END__
endsnippet

snippet case "case" w
case ${1:object}
when ${2:condition}
	${3}
end
endsnippet

snippet when "when" w
when ${1:condition}
	${2}
endsnippet

snippet def "def" w
def ${1:method_name}
	${2}
end
endsnippet

snippet deft "deft" w
def test_${1:case_name}
	${2}
end
endsnippet

snippet if "if" w
if ${1:condition}
	${2}
end
endsnippet

snippet ife "ife" w
if ${1:condition}
	${2}
else
	${3}
end
endsnippet

snippet elsif "elsif" w
elsif ${1:condition}
	${2}
endsnippet

snippet unless "unless" w
unless ${1:condition}
	${2}
end
endsnippet

snippet while "while" w
while ${1:condition}
	${2}
end
endsnippet

snippet for "for" w
for ${1:e} in ${2:c}
	${3}
end
endsnippet

snippet until "until" w
until ${1:condition}
	${2}
end
endsnippet

snippet cla "class .. end" w
class ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
	${2}
end
endsnippet

snippet cla "class .. initialize .. end" w
class ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
	def initialize(${2:args})
		${3}
	end
end
endsnippet

snippet cla "class .. < ParentClass .. initialize .. end" w
class ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < ${2:ParentClass}
	def initialize(${3:args})
		${4}
	end
end
endsnippet

snippet cla "ClassName = Struct .. do .. end" w
${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} = Struct.new(:${2:attr_names}) do
	def ${3:method_name}
		${4}
	end
end
endsnippet

snippet cla "class BlankSlate .. initialize .. end" w
class ${1:BlankSlate}
	instance_methods.each { |meth| undef_method(meth) unless meth =~ /\A__/ }
end
endsnippet

snippet cla "class << self .. end" w
class << ${1:self}
	${2}
end
endsnippet

# class .. < DelegateClass .. initialize .. end
snippet cla- "cla-" w
class ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < DelegateClass(${2:ParentClass})
	def initialize(${3:args})
		super(${4:del_obj})
		${5}
	end
end
endsnippet

snippet mod "module .. end" w
module ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
	${2}
end
endsnippet

snippet mod "module .. module_function .. end" w
module ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
	module_function
	${2}
end
endsnippet

snippet mod "module .. ClassMethods .. end" w
module ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
	module ClassMethods
		${2}
	end
	module InstanceMethods
	end
	def self.included(receiver)
		receiver.extend         ClassMethods
		receiver.send :include, InstanceMethods
	end
end
endsnippet

# attr_reader
snippet r "r" w
attr_reader :${1:attr_names}
endsnippet

# attr_writer
snippet w "w" w
attr_writer :${1:attr_names}
endsnippet

# attr_accessor
snippet rw "rw" w
attr_accessor :${1:attr_names}
endsnippet

snippet atp "atp" w
attr_protected :${1:attr_names}
endsnippet

snippet ata "ata" w
attr_accessible :${1:attr_names}
endsnippet

# include Enumerable
snippet Enum "Enum" w
include Enumerable
def each(&block)
	${1}
end
endsnippet

# include Comparable
snippet Comp "Comp" w
include Comparable
def <=>(other)
	${1}
end
endsnippet

# extend Forwardable
snippet Forw- "Forw-" w
extend Forwardable
endsnippet

# def self
snippet defs "defs" w
def self.${1:class_method_name}
	${2}
end
endsnippet

# def method_missing
snippet defmm "defmm" w
def method_missing(meth, *args, &blk)
	${1}
end
endsnippet

snippet defd "defd" w
def_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}
endsnippet

snippet defds "defds" w
def_delegators :${1:@del_obj}, :${2:del_methods}
endsnippet

snippet am "am" w
alias_method :${1:new_name}, :${2:old_name}
endsnippet

snippet app "app" w
if __FILE__ == $PROGRAM_NAME
	${1}
end
endsnippet

# usage_if()
snippet usai "usai" w
if ARGV.${1}
	abort "Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}"${3}
end
endsnippet

# usage_unless()
snippet usau "usau" w
unless ARGV.${1}
	abort "Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}"${3}
end
endsnippet

snippet array "array" w
Array.new(${1:10}) { |${2:i}| ${3} }
endsnippet

snippet hash "hash" w
Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }
endsnippet

snippet file "File.foreach() { |line| .. }" w
File.foreach(${1:"path/to/file"}) { |${2:line}| ${3} }
endsnippet

snippet file "File.read()" w
File.read(${1:"path/to/file"})${2}
endsnippet

snippet Dir "Dir.global() { |file| .. }" w
Dir.glob(${1:"dir/glob/*"}) { |${2:file}| ${3} }
endsnippet

snippet dir "dir" w
Filename.dirname(__FILE__)
endsnippet

snippet deli "deli" w
delete_if { |${1:e}| ${2} }
endsnippet

snippet fil "fil" w
fill(${1:range}) { |${2:i}| ${3} }
endsnippet

# flatten_once()
snippet flao "flao" w
inject(Array.new) { |${1:arr}, ${2:a}| $1.push(*$2)}${3}
endsnippet

snippet zip "zip" w
zip(${1:enums}) { |${2:row}| ${3} }
endsnippet

# downto(0) { |n| .. }
snippet dow "dow" w
downto(${1:0}) { |${2:n}| ${3} }
endsnippet

snippet ste "ste" w
step(${1:2}) { |${2:n}| ${3} }
endsnippet

snippet tim "tim" w
times { |${1:n}| ${2} }
endsnippet

snippet upt "upt" w
upto(${1:1.0/0.0}) { |${2:n}| ${3} }
endsnippet

snippet loo "loo" w
loop { ${1} }
endsnippet

snippet ea "ea" w
each { |${1:e}| ${2} }
endsnippet

snippet ead "ead" w
each do |${1:e}|
	${2}
end
endsnippet

snippet eab "eab" w
each_byte { |${1:byte}| ${2} }
endsnippet

snippet eac- "each_char { |chr| .. }" w
each_char { |${1:chr}| ${2} }
endsnippet

snippet eac- "each_cons(..) { |group| .. }" w
each_cons(${1:2}) { |${2:group}| ${3} }
endsnippet

snippet eai "eai" w
each_index { |${1:i}| ${2} }
endsnippet

snippet eaid "eaid" w
each_index do |${1:i}|
	${2}
end
endsnippet

snippet eak "eak" w
each_key { |${1:key}| ${2} }
endsnippet

snippet eakd "eakd" w
each_key do |${1:key}|
	${2}
end
endsnippet

snippet eal "eal" w
each_line { |${1:line}| ${2} }
endsnippet

snippet eald "eald" w
each_line do |${1:line}|
	${2}
end
endsnippet

snippet eap "eap" w
each_pair { |${1:name}, ${2:val}| ${3} }
endsnippet

snippet eapd "eapd" w
each_pair do |${1:name}, ${2:val}|
	${3}
end
endsnippet

snippet eas- "eas-" w
each_slice(${1:2}) { |${2:group}| ${3} }
endsnippet

snippet easd- "easd-" w
each_slice(${1:2}) do |${2:group}|
	${3}
end
endsnippet

snippet eav "eav" w
each_value { |${1:val}| ${2} }
endsnippet

snippet eavd "eavd" w
each_value do |${1:val}|
	${2}
end
endsnippet

snippet eawi "eawi" w
each_with_index { |${1:e}, ${2:i}| ${3} }
endsnippet

snippet eawid "eawid" w
each_with_index do |${1:e}, ${2:i}|
	${3}
end
endsnippet

snippet eawo "eawo" w
each_with_object(${1:init}) { |${2:e}, ${3:var}| ${4} }
endsnippet

snippet eawod "eawod" w
each_with_object(${1:init}) do |${2:e}, ${3:var}|
	${4}
end
endsnippet

snippet reve "reve" w
reverse_each { |${1:e}| ${2} }
endsnippet

snippet reved "reved" w
reverse_each do |${1:e}|
	${2}
end
endsnippet

snippet inj "inj" w
inject(${1:init}) { |${2:mem}, ${3:var}| ${4} }
endsnippet

snippet injd "injd" w
inject(${1:init}) do |${2:mem}, ${3:var}|
	${4}
end
endsnippet

snippet map "map" w
map { |${1:e}| ${2} }
endsnippet

snippet mapd "mapd" w
map do |${1:e}|
	${2}
end
endsnippet

snippet mapwi- "mapwi-" w
enum_with_index.map { |${1:e}, ${2:i}| ${3} }
endsnippet

snippet sor "sor" w
sort { |a, b| ${1} }
endsnippet

snippet sorb "sorb" w
sort_by { |${1:e}| ${2} }
endsnippet

snippet ran "ran" w
sort_by { rand }
endsnippet

snippet all "all" w
all? { |${1:e}| ${2} }
endsnippet

snippet any "any" w
any? { |${1:e}| ${2} }
endsnippet

snippet cl "cl" w
classify { |${1:e}| ${2} }
endsnippet

snippet col "col" w
collect { |${1:e}| ${2} }
endsnippet

snippet cold "cold" w
collect do |${1:e}|
	${2}
end
endsnippet

snippet det "det" w
detect { |${1:e}| ${2} }
endsnippet

snippet detd "detd" w
detect do |${1:e}|
	${2}
end
endsnippet

snippet fet "fet" w
fetch(${1:name}) { |${2:key}| ${3} }
endsnippet

snippet fin "fin" w
find { |${1:e}| ${2} }
endsnippet

snippet find "find" w
find do |${1:e}|
	${2}
end
endsnippet

snippet fina "fina" w
find_all { |${1:e}| ${2} }
endsnippet

snippet finad "finad" w
find_all do |${1:e}|
	${2}
end
endsnippet

snippet gre "gre" w
grep(${1:/pattern/}) { |${2:match}| ${3} }
endsnippet

snippet sub "sub" w
${1:g}sub(${2:/pattern/}) { |${3:match}| ${4} }
endsnippet

snippet sca "sca" w
scan(${1:/pattern/}) { |${2:match}| ${3} }
endsnippet

snippet scad "scad" w
scan(${1:/pattern/}) do |${2:match}|
	${3}
end
endsnippet

snippet max "max" w
max { |a, b| ${1} }
endsnippet

snippet min "min" w
min { |a, b| ${1} }
endsnippet

snippet par "par" w
partition { |${1:e}| ${2} }
endsnippet

snippet pard "pard" w
partition do |${1:e}|
	${2}
end
endsnippet

snippet rej "rej" w
reject { |${1:e}| ${2} }
endsnippet

snippet rejd "rejd" w
reject do |${1:e}|
	${2}
end
endsnippet

snippet sel "sel" w
select { |${1:e}| ${2} }
endsnippet

snippet seld "seld" w
select do |${1:e}|
	${2}
end
endsnippet

snippet lam "lam" w
lambda { |${1:args}| ${2} }
endsnippet

snippet doo "doo" w
do
	${1}
end
endsnippet

snippet dov "dov" w
do |${1:variable}|
	${2}
end
endsnippet

snippet : ":" w
:${1:key} => ${2:"value"}${3}
endsnippet

snippet ope "ope" w
open(${1:"path/or/url/or/pipe"}, "${2:w}") { |${3:io}| ${4} }
endsnippet

# path_from_here()
snippet fpath "fpath" w
File.join(File.dirname(__FILE__), *%2[${1:rel path here}])${2}
endsnippet

# unix_filter {}
snippet unif "unif" w
ARGF.each_line${1} do |${2:line}|
	${3}
end
endsnippet

# option_parse {}
snippet optp "optp" w
require "optparse"
options = {${1:default => "args"}}
ARGV.options do |opts|
	opts.banner = "Usage: #{File.basename($PROGRAM_NAME)}
endsnippet

snippet opt "opt" w
opts.on( "-${1:o}", "--${2:long-option-name}", ${3:String},
         "${4:Option description.}") do |${5:opt}|
	${6}
end
endsnippet

snippet tc "tc" w
require "test/unit"
require "${1:library_file_name}"
class Test${2:$1} < Test::Unit::TestCase
	def test_${3:case_name}
		${4}
	end
end
endsnippet

snippet ts "ts" w
require "test/unit"
require "tc_${1:test_case_file}"
require "tc_${2:test_case_file}"${3}
endsnippet

snippet as "as" w
assert ${1:test}, "${2:Failure message.}"${3}
endsnippet

snippet ase "ase" w
assert_equal ${1:expected}, ${2:actual}${3}
endsnippet

snippet asne "asne" w
assert_not_equal ${1:unexpected}, ${2:actual}${3}
endsnippet

snippet asid "asid" w
assert_in_delta ${1:expected_float}, ${2:actual_float}, ${3:2 ** -20}${4}
endsnippet

snippet asio "asio" w
assert_instance_of ${1:ExpectedClass}, ${2:actual_instance}${3}
endsnippet

snippet asko "asko" w
assert_kind_of ${1:ExpectedKind}, ${2:actual_instance}${3}
endsnippet

snippet asn "asn" w
assert_nil ${1:instance}${2}
endsnippet

snippet asnn "asnn" w
assert_not_nil ${1:instance}${2}
endsnippet

snippet asm "asm" w
assert_match /${1:expected_pattern}/, ${2:actual_string}${3}
endsnippet

snippet asnm "asnm" w
assert_no_match /${1:unexpected_pattern}/, ${2:actual_string}${3}
endsnippet

snippet aso "aso" w
assert_operator ${1:left}, :${2:operator}, ${3:right}${4}
endsnippet

snippet asr "asr" w
assert_raise ${1:Exception} { ${2} }
endsnippet

snippet asrd "asrd" w
assert_raise ${1:Exception} do
	${2}
end
endsnippet

snippet asnr "asnr" w
assert_nothing_raised ${1:Exception} { ${2} }
endsnippet

snippet asnrd "asnrd" w
assert_nothing_raised ${1:Exception} do
	${2}
end
endsnippet

snippet asrt "asrt" w
assert_respond_to ${1:object}, :${2:method}${3}
endsnippet

snippet ass "assert_same(..)" w
assert_same ${1:expected}, ${2:actual}${3}
endsnippet

snippet ass "assert_send(..)" w
assert_send [${1:object}, :${2:message}, ${3:args}]${4}
endsnippet

snippet asns "asns" w
assert_not_same ${1:unexpected}, ${2:actual}${3}
endsnippet

snippet ast "ast" w
assert_throws :${1:expected} { ${2} }
endsnippet

snippet astd "astd" w
assert_throws :${1:expected} do
	${2}
end
endsnippet

snippet asnt "asnt" w
assert_nothing_thrown { ${1} }
endsnippet

snippet asntd "asntd" w
assert_nothing_thrown do
	${1}
end
endsnippet

snippet fl "fl" w
flunk "${1:Failure message.}"${2}
endsnippet

# Benchmark.bmbm do .. end
snippet bm- "bm-" w
TESTS = ${1:10_000}
Benchmark.bmbm do |results|
	${2}
end
endsnippet

snippet rep "rep" w
results.report("${1:name}:") { TESTS.times { ${2} }}
endsnippet

# Marshal.dump(.., file)
snippet Md "Md" w
File.open(${1:"path/to/file.dump"}, "wb") { |${2:file}| Marshal.dump(${3:obj}, $2) }${4}
endsnippet

# Mashal.load(obj)
snippet Ml "Ml" w
File.open(${1:"path/to/file.dump"}, "rb") { |${2:file}| Marshal.load($2) }${3}
endsnippet

# deep_copy(..)
snippet deec "deec" w
Marshal.load(Marshal.dump(${1:obj_to_copy}))${2}
endsnippet

snippet Pn- "Pn-" w
PStore.new(${1:"file_name.pstore"})${2}
endsnippet

snippet tra "tra" w
transaction(${1:true}) { ${2} }
endsnippet

# xmlread(..)
snippet xml- "xml-" w
REXML::Document.new(File.read(${1:"path/to/file"}))${2}
endsnippet

# xpath(..) { .. }
snippet xpa "xpa" w
elements.each(${1:"//Xpath"}) do |${2:node}|
	${3}
end
endsnippet

# class_from_name()
snippet clafn "clafn" w
split("::").inject(Object) { |par, const| par.const_get(const) }
endsnippet

# singleton_class()
snippet sinc "sinc" w
class << self; self end
endsnippet

snippet nam "nam" w
namespace :${1:`!v Filename()`} do
	${2}
end
endsnippet

snippet tas "tas" w
desc "${1:Task description}"
task :${2:task_name => [:dependent, :tasks]} do
	${3}
end
endsnippet

# block
snippet b "b" w
{ |${1:var}| ${2} }
endsnippet

snippet begin "begin" w
begin
	raise 'A test exception.'
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
else
	# other exception
ensure
	# always executed
end
endsnippet

#debugging
snippet debug "debug" w
require 'ruby-debug'; debugger; true;
endsnippet

snippet pry "pry" w
require 'pry'; binding.pry
endsnippet

#############################################
# Rails snippets - for pure Ruby, see above #
#############################################
snippet art "art" w
assert_redirected_to ${1::action => "${2:index}"}
endsnippet

snippet artnp "artnp" w
assert_redirected_to ${1:parent}_${2:child}_path(${3:@$1}, ${4:@$2})
endsnippet

snippet artnpp "artnpp" w
assert_redirected_to ${1:parent}_${2:child}_path(${3:@$1})
endsnippet

snippet artp "artp" w
assert_redirected_to ${1:model}_path(${2:@$1})
endsnippet

snippet artpp "artpp" w
assert_redirected_to ${1:model}s_path
endsnippet

snippet asd "asd" w
assert_difference "${1:Model}.${2:count}", $1 do
	${3}
end
endsnippet

snippet asnd "asnd" w
assert_no_difference "${1:Model}.${2:count}" do
	${3}
end
endsnippet

snippet asre "asre" w
assert_response :${1:success}, @response.body${2}
endsnippet

snippet asrj "asrj" w
assert_rjs :${1:replace}, "${2:dom id}"
endsnippet

snippet ass "assert_select(..)" w
assert_select '${1:path}', :${2:text} => '${3:inner_html' ${4:do}
endsnippet

snippet bf "bf" w
before_filter :${1:method}
endsnippet

snippet bt "bt" w
belongs_to :${1:association}
endsnippet

snippet btp "btp" w
belongs_to :${1:association}, :polymorphic => true${2}
endsnippet

snippet crw "crw" w
cattr_accessor :${1:attr_names}
endsnippet

snippet defcreate "defcreate" w
def create
	@${1:model_class_name} = ${2:ModelClassName}.new(params[:$1])
	respond_to do |wants|
		if @$1.save
			flash[:notice] = '$2 was successfully created.'
			wants.html { redirect_to(@$1) }
			wants.xml  { render :xml => @$1, :status => :created, :location => @$1 }
		else
			wants.html { render :action => "new" }
			wants.xml  { render :xml => @$1.errors, :status => :unprocessable_entity }
		end
	end
end${3}
endsnippet

snippet defdestroy "defdestroy" w
def destroy
	@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
	@$1.destroy
	respond_to do |wants|
		wants.html { redirect_to($1s_url) }
		wants.xml  { head :ok }
	end
end${3}
endsnippet

snippet defedit "defedit" w
def edit
	@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
end
endsnippet

snippet defindex "defindex" w
def index
	@${1:model_class_name} = ${2:ModelClassName}.all
	respond_to do |wants|
		wants.html # index.html.erb
		wants.xml  { render :xml => @$1s }
	end
end${3}
endsnippet

snippet defnew "defnew" w
def new
	@${1:model_class_name} = ${2:ModelClassName}.new
	respond_to do |wants|
		wants.html # new.html.erb
		wants.xml  { render :xml => @$1 }
	end
end${3}
endsnippet

snippet defshow "defshow" w
def show
	@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
	respond_to do |wants|
		wants.html # show.html.erb
		wants.xml  { render :xml => @$1 }
	end
end${3}
endsnippet

snippet defupdate "defupdate" w
def update
	@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
	respond_to do |wants|
		if @$1.update_attributes(params[:$1])
			flash[:notice] = '$2 was successfully updated.'
			wants.html { redirect_to(@$1) }
			wants.xml  { head :ok }
		else
			wants.html { render :action => "edit" }
			wants.xml  { render :xml => @$1.errors, :status => :unprocessable_entity }
		end
	end
end${3}
endsnippet

snippet dele "delegate .. to" w
delegate :${1:methods}, :to => :${2:object}
endsnippet

snippet dele "delegate .. to .. prefix .. allow_nil" w
delegate :${1:methods}, :to => :${2:object}, :prefix => :${3:prefix}, :allow_nil => ${4:allow_nil}
endsnippet

snippet flash "flash" w
flash[:${1:notice}] = "${2}"
endsnippet

snippet habtm "habtm" w
has_and_belongs_to_many :${1:object}, :join_table => "${2:table_name}", :foreign_key => "${3}_id"${4}
endsnippet

snippet hm "hm" w
has_many :${1:object}
endsnippet

snippet hmd "hmd" w
has_many :${1:other}s, :class_name => "${2:$1}", :foreign_key => "${3:$1}_id", :dependent => :destroy${4}
endsnippet

snippet hmt "hmt" w
has_many :${1:object}, :through => :${2:object}
endsnippet

snippet ho "ho" w
has_one :${1:object}
endsnippet

snippet i18 "i18" w
I18n.t('${1:type.key}')${2}
endsnippet

snippet ist "ist" w
<%= image_submit_tag("${1:agree.png}", :id => "${2:id}"${3} %>
endsnippet

snippet log "log" w
Rails.logger.${1:debug} ${2}
endsnippet

snippet log2 "log2" w
RAILS_DEFAULT_LOGGER.${1:debug} ${2}
endsnippet

snippet logd "logd" w
logger.debug { "${1:message}" }${2}
endsnippet

snippet loge "loge" w
logger.error { "${1:message}" }${2}
endsnippet

snippet logf "logf" w
logger.fatal { "${1:message}" }${2}
endsnippet

snippet logi "logi" w
logger.info { "${1:message}" }${2}
endsnippet

snippet logw "logw" w
logger.warn { "${1:message}" }${2}
endsnippet

snippet mapc "mapc" w
${1:map}.${2:connect} '${3:controller/:action/:id}'
endsnippet

snippet mapca "mapca" w
${1:map}.catch_all "*${2:anything}", :controller => "${3:default}", :action => "${4:error}"${5}
endsnippet

snippet mapr "mapr" w
${1:map}.resource :${2:resource}
endsnippet

snippet maprs "maprs" w
${1:map}.resources :${2:resource}
endsnippet

snippet mapwo "mapwo" w
${1:map}.with_options :${2:controller} => '${3:thing}' do |$3|
	${4}
end
endsnippet

snippet mbs "mbs" w
before_save :${1:method}
endsnippet

snippet mcht "mcht" w
change_table :${1:table_name} do |t|
	${2}
end
endsnippet

snippet mp "mp" w
map(&:${1:id})
endsnippet

snippet mrw "mrw" w
mattr_accessor :${1:attr_names}
endsnippet

snippet oa "oa" w
order("${1:field}")
endsnippet

snippet od "od" w
order("${1:field} DESC")
endsnippet

snippet pa "pa" w
params[:${1:id}]${2}
endsnippet

snippet ra "ra" w
render :action => "${1:action}"
endsnippet

snippet ral "ral" w
render :action => "${1:action}", :layout => "${2:layoutname}"
endsnippet

snippet rest "rest" w
respond_to do |wants|
	wants.${1:html} { ${2} }
end
endsnippet

snippet rf "rf" w
render :file => "${1:filepath}"
endsnippet

snippet rfu "rfu" w
render :file => "${1:filepath}", :use_full_path => ${2:false}
endsnippet

snippet ri "ri" w
render :inline => "${1:<%= 'hello' %>}"
endsnippet

snippet ril "ril" w
render :inline => "${1:<%= 'hello' %>}", :locals => { ${2::name} => "${3:value}"${4} }
endsnippet

snippet rit "rit" w
render :inline => "${1:<%= 'hello' %>}", :type => ${2::rxml}
endsnippet

snippet rjson "rjson" w
render :json => ${1:text to render}
endsnippet

snippet rl "rl" w
render :layout => "${1:layoutname}"
endsnippet

snippet rn "rn" w
render :nothing => ${1:true}
endsnippet

snippet rns "rns" w
render :nothing => ${1:true}, :status => ${2:401}
endsnippet

snippet rp "rp" w
render :partial => "${1:item}"
endsnippet

snippet rpc "rpc" w
render :partial => "${1:item}", :collection => ${2:@$1s}
endsnippet

snippet rpl "rpl" w
render :partial => "${1:item}", :locals => { :${2:$1} => ${3:@$1}
endsnippet

snippet rpo "rpo" w
render :partial => "${1:item}", :object => ${2:@$1}
endsnippet

snippet rps "rps" w
render :partial => "${1:item}", :status => ${2:500}
endsnippet

snippet rt "rt" w
render :text => "${1:text to render}"
endsnippet

snippet rtl "rtl" w
render :text => "${1:text to render}", :layout => "${2:layoutname}"
endsnippet

snippet rtlt "rtlt" w
render :text => "${1:text to render}", :layout => ${2:true}
endsnippet

snippet rts "rts" w
render :text => "${1:text to render}", :status => ${2:401}
endsnippet

snippet ru "ru" w
render :update do |${1:page}|
	$1.${2}
end
endsnippet

snippet rxml "rxml" w
render :xml => ${1:text to render}
endsnippet

snippet sc "sc" w
scope :${1:name}, :where(:@${2:field} => ${3:value})
endsnippet

snippet sl "sl" w
scope :${1:name}, lambda do |${2:value}|
	where("${3:field = ?}", ${4:bind var})
end
endsnippet

snippet sha1 "sha1" w
Digest::SHA1.hexdigest(${1:string})
endsnippet

snippet sweeper "sweeper" w
class ${1:ModelClassName}Sweeper < ActionController::Caching::Sweeper
	observe $1
	def after_save(${2:model_class_name})
		expire_cache($2)
	end
	def after_destroy($2)
		expire_cache($2)
	end
	def expire_cache($2)
		expire_page
	end
end
endsnippet

snippet tcb "tcb" w
t.boolean :${1:title}
${2}
endsnippet

snippet tcbi "tcbi" w
t.binary :${1:title}, :limit => ${2:2}.megabytes
${3}
endsnippet

snippet tcd "tcd" w
t.decimal :${1:title}, :precision => ${2:10}, :scale => ${3:2}
${4}
endsnippet

snippet tcda "tcda" w
t.date :${1:title}
${2}
endsnippet

snippet tcdt "tcdt" w
t.datetime :${1:title}
${2}
endsnippet

snippet tcf "tcf" w
t.float :${1:title}
${2}
endsnippet

snippet tch "tch" w
t.change :${1:name}, :${2:string}, :${3:limit} => ${4:80}
${5}
endsnippet

snippet tci "tci" w
t.integer :${1:title}
${2}
endsnippet

snippet tcl "tcl" w
t.integer :lock_version, :null => false, :default => 0
${1}
endsnippet

snippet tcr "tcr" w
t.references :${1:taggable}, :polymorphic => { :default => '${2:Photo}' }
${3}
endsnippet

snippet tcs "tcs" w
t.string :${1:title}
${2}
endsnippet

snippet tct "tct" w
t.text :${1:title}
${2}
endsnippet

snippet tcti "tcti" w
t.time :${1:title}
${2}
endsnippet

snippet tcts "tcts" w
t.timestamp :${1:title}
${2}
endsnippet

snippet tctss "tctss" w
t.timestamps
${1}
endsnippet

snippet va "va" w
validates_associated :${1:attribute}
endsnippet

snippet vao "vao" w
validates_acceptance_of :${1:terms}
endsnippet

snippet vc "vc" w
validates_confirmation_of :${1:attribute}
endsnippet

snippet ve "ve" w
validates_exclusion_of :${1:attribute}, :in => ${2:%w( mov avi )}
endsnippet

snippet vf "vf" w
validates_format_of :${1:attribute}, :with => /${2:regex}/
endsnippet

snippet vi "vi" w
validates_inclusion_of :${1:attribute}, :in => %w(${2: mov avi })
endsnippet

snippet vl "vl" w
validates_length_of :${1:attribute}, :within => ${2:3}..${3:20}
endsnippet

snippet vn "vn" w
validates_numericality_of :${1:attribute}
endsnippet

snippet vpo "vpo" w
validates_presence_of :${1:attribute}
endsnippet

snippet vu "vu" w
validates_uniqueness_of :${1:attribute}
endsnippet

snippet wants "wants" w
wants.${1:js|xml|html} { ${2} }
endsnippet

snippet wc "wc" w
where(${1:"conditions"}${2:, bind_var})
endsnippet

snippet wh "wh" w
where(${1:field} => ${2:value})
endsnippet

snippet xdelete "xdelete" w
xhr :delete, :${1:destroy}, :id => ${2:1}${3}
endsnippet

snippet xget "xget" w
xhr :get, :${1:show}, :id => ${2:1}${3}
endsnippet

snippet xpost "xpost" w
xhr :post, :${1:create}, :${2:object} => { ${3} }
endsnippet

snippet xput "xput" w
xhr :put, :${1:update}, :id => ${2:1}, :${3:object} => { ${4} }${5}
endsnippet

snippet test "test" w
test "should ${1:do something}" do
	${2}
end
endsnippet

#migrations
snippet mac "mac" w
add_column :${1:table_name}, :${2:column_name}, :${3:data_type}
endsnippet

snippet mrc "mrc" w
remove_column :${1:table_name}, :${2:column_name}
endsnippet

snippet mrnc "mrnc" w
rename_column :${1:table_name}, :${2:old_column_name}, :${3:new_column_name}
endsnippet

snippet mcc "mcc" w
change_column :${1:table}, :${2:column}, :${3:type}
endsnippet

snippet mnc "mnc" w
t.${1:string} :${2:title}${3:, null: false}${4}
endsnippet

snippet mct "mct" w
create_table :${1:table_name} do |t|
	${2}
end
endsnippet

snippet migration "class .. < ActiveRecord::Migration .. def up .. def down .. end" w
class ${1:class_name} < ActiveRecord::Migration
	def up
		${2}
	end
	def down
	end
end
endsnippet

snippet migration "class .. < ActiveRecord::Migration .. def change .. end" w
class ${1:class_name} < ActiveRecord::Migration
	def change
		${2}
	end
end
endsnippet

snippet trc "trc" w
t.remove :${1:column}
endsnippet

snippet tre "tre" w
t.rename :${1:old_column_name}, :${2:new_column_name}
${3}
endsnippet

snippet tref "tref" w
t.references :${1:model}
endsnippet

#rspec
snippet it "it" w
it "${1:spec_name}" do
	${2}
end
endsnippet

snippet itp "itp" w
it "${1:spec_name}"
${2}
endsnippet

snippet its "its" w
its(:${1:method}) { should ${2} }
endsnippet

snippet itsn "itsn" w
its(:${1:method}) { should_not ${2} }
endsnippet

snippet desc "desc" w
describe ${1:class_name} do
	${2}
end
endsnippet

snippet cont "cont" w
context "${1:message}" do
	${2}
end
endsnippet

snippet bef "bef" w
before(:${1:each}) do
	${2}
end
endsnippet

snippet aft "aft" w
after(:${1:each}) do
	${2}
end
endsnippet

snippet let "let" w
let(:${1:object}) ${2:block}
endsnippet

snippet let! "let!" w
let!(:${1:object}) ${2:block}
endsnippet

snippet subj "subj" w
subject { ${1} }
endsnippet

snippet spec "spec" w
specify { subject.${1} }
endsnippet

snippet exp "exp" w
expect(${1:object}).to ${2}
endsnippet

snippet btr "btr" w
be_true
endsnippet

snippet bfa "bfa" w
be_false
endsnippet

snippet shared "shared" w
shared_examples "${1:shared examples name}" ${2}
endsnippet

snippet itb "itb" w
it_behaves_like "${1:shared examples name}"${2}
endsnippet

snippet ana "ana" w
accepts_nested_attributes_for :${1:association}
endsnippet


