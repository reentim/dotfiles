#BASICS
# doc
snippet doc "doc" w
/**
 *  ${1:Description}
 *
 *	@author ${2:name}
 *	@since  ${3:`!v strftime("%d/%m/%y %H:%M:%S")`}
 */
${4}
endsnippet

# doc comment
snippet docc "docc" w
/**
 *	${1:@private}$0
 */
${2}
endsnippet

# class
snippet class "class" w
${1:public }class ${2:`!v fnamemodify(bufname("%"),":t:r")`} ${3:extends}
{
	//--------------------------------------
	//  CONSTRUCTOR
	//--------------------------------------
	public $2 (${4:arguments}) {
		${0:// expression}
	}
}
endsnippet

# package
snippet package "package" w
/**
 *  ${1:Description}
 *
 *	@author ${2:$TM_FULLNAME}
 *	@since  ${3:`!v strftime("%d/%m/%y %H:%M:%S")`}
 */
package ${4:package};
endsnippet

# function
snippet fun "fun" w
${1:void/private/protected/public}${2: static} ${3:name}(${4}) {
	${5://if not void return null;}
}
${6}
endsnippet

snippet fn "fn" w
${1:void }${2:name}(${3}) {
	${4://if not void return null;}
}
${5}
endsnippet

#	constant
snippet const "const" w
static final ${1:Object} ${2:VAR_NAM} = ${3};
endsnippet

# var
snippet var "var" w
${1:private/public }${2:static }${3:String} ${4:str}${5: =}${6:value};
endsnippet

# var objects
snippet obj "obj" w
${1:private/public }${2:Object} ${3:o}${4: = new }$2(${5});
endsnippet

#loop for
snippet for "for" w
for (int ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
	${4:$1[$2]}
};
endsnippet

#loop while
snippet while "while" w
while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

#break
snippet break "break" w
break ${1:label};
endsnippet

#case
snippet case "case" w
case ${1:expression} :
	${2}
break;
endsnippet

#default
snippet default "default" w
default :
	${1}
break;
endsnippet

#switch
snippet switch "switch" w
switch(${1:expression}) {
	case '${3:case}':
		${4:// code}
		break;
	${5}
	default:
		${2:// code}
}
endsnippet

#try
snippet try "try" w
try {
	${3}
} catch(${1:Exception} ${2:e}) {
}
endsnippet

#try catch finally
snippet tryf "tryf" w
try {
	${3}
} catch(${1:Exception} ${2:e}) {
} finally {
}
endsnippet

#throw
snippet throw "throw" w
throw new ("${1:Exception()}");
endsnippet

#ternary
snippet ? "?" w
? ${1:trueExpression} : ${2:falseExpression}
${3}
endsnippet

snippet if "if" w
if (${1:true}) {${2}}
endsnippet

# if ... else
snippet ife "ife" w
if (${1:true}) {${2}}
else{${3}}
endsnippet

#get
snippet get "get" w
public ${1:String} get${2}() {
	return ${2:fieldName};
}
endsnippet

#set
snippet set "set" w
public void set${1}(${2:String} new${1}) {
	${1:fieldName} = new${1};
}
endsnippet

#printIn
snippet println "println" w
println("${1:`!v fnamemodify(bufname("%"),":t:r")`}::${2:method}() "${3: +} ${4});
endsnippet

#println string
snippet pr "pr" w
println("${1}");
endsnippet

#setup draw
snippet setup "setup" w
void setup(){
	${1}
}
void draw(){
	${2}
}
endsnippet

#setup OPENGL
snippet opengl "opengl" w
import processing.opengl.*;
import javax.media.opengl.*;
PGraphicsOpenGL pgl;
GL gl;
void setup(){
	size( ${1:300}, ${2:300}, OPENGL );
	colorMode( RGB, 1.0 );
	hint( ENABLE_OPENGL_4X_SMOOTH );
	pgl = (PGraphicsOpenGL) g;
	gl = pgl.gl;
	gl.setSwapInterval(1);
	initGL();
	${3}
}
void draw(){
	pgl.beginGL();
		${4}
	pgl.endGL();
	getOpenGLErrors();
}
void initGL(){
	${5}
}
void getOpenGLErrors(){
	int error = gl.glGetError();
	switch (error){
		case 1280 :
			println("GL_INVALID_ENUM - An invalid enumerant was passed to an OpenGL command.");
		break;
		case 1282 :
			println("GL_INVALID_OPERATION - An OpenGL command was issued that was invalid or inappropriate for the current state.");
		break;
		case 1281 :
			println("GL_INVALID_VALUE - A value was passed to OpenGL that was outside the allowed range.");
		break;
		case 1285 :
			println("GL_OUT_OF_MEMORY - OpenGL was unable to allocate enough memory to process a command.");
		break;
		case 1283 :
			println("GL_STACK_OVERFLOW - A command caused an OpenGL stack to overflow.");
		break;
		case 1284 :
			println("GL_STACK_UNDERFLOW - A command caused an OpenGL stack to underflow.");
		break;
		case 32817 :
			println("GL_TABLE_TOO_LARGE");
		break;
	}
}
endsnippet

#GL Functions
snippet gl "begin gl" w
pgl.beginGL();
	${1}
pgl.endGL();
endsnippet

snippet gl "gl swap interval" w
// specify the minimum swap interval for buffer swaps.
gl.setSwapInterval(${1:interval});
endsnippet

snippet gl "gl call list" w
// execute a display list
gl.glCallList(${1:list});
endsnippet

snippet gl "gl gen buffers" w
// import java.nio.IntBuffer;
// import java.nio.FloatBuffer;
// import com.sun.opengl.util.BufferUtil;
// You might need to create four buffers to store vertext data, normal data, texture coordinate data, and indices in vertex arrays
IntBuffer bufferObjects = IntBuffer.allocate(${1:4});
gl.glGenBuffers($1, bufferObjects);
int vertexCount = ${2:3};
int numCoordinates = ${3:3};
// vertexCount * numCoordinates
FloatBuffer vertices = BufferUtil.newFloatBuffer(vertexCount * numCoordinates);
float[] v = {0.0f, 0.0f, 0.0f,
						 1.0f, 0.0f, 0.0f,
						 0.0f, 1.0f, 1.0f};
vertices.put(v);
// Bind the first buffer object ID for use with vertext array data
gl.glBindBuffer(GL.GL_ARRAY_BUFFER, bufferObjects.get(0));
gl.glBufferData(GL.GL_ARRAY_BUFFER, vertexCount * numCoordinates * BufferUtil.SIZEOF_FLOAT, vertices, GL.GL_STATIC_DRAW);
endsnippet

snippet gl "gl bind buffer" w
${2:// A buffer ID of zero unbinds a buffer object}
gl.glBindBuffer(GL.GL_ARRAY_BUFFER, ${1:0});
endsnippet

snippet gl "gl delete buffers" w
${3:// Parameters are the same for glGenBuffers}
gl.glDeleteBuffers(${1:4}, ${2:bufferObjects});
endsnippet

snippet gl "gl depth mask" w
// enable or disable writing into the depth buffer
gl.glDepthMask(${1:flag});
endsnippet

snippet gl "gl load identity" w
// replaces the top of the active matrix stack with the identity matrix
gl.glLoadIdentity();
endsnippet

snippet gl "gl tex coord 2f" w
// set the current texture coordinates - 2 floats
gl.glTexCoord2f(${1:0.0f}, ${2:0.0f});
endsnippet

snippet gl "gl vertex 2f" w
gl.glVertex2f(${1:0.0f}, ${2:0.0f});
endsnippet

snippet gl "gl vertex 3f" w
gl.glVertex3f(${1:0.0f}, ${2:0.0f}, ${3:0.0f});
endsnippet

snippet gl "gl translate f" w
// multiply the current matrix by a translation matrix
gl.glTranslatef(${1:x}, ${2:y}, ${3:z});
endsnippet

snippet gl "gl rotate f" w
// rotate, x-axis, y-axis, z-axiz
gl.glRotatef(${1:angle}, ${2:x}, ${3:y}, ${4:z});
endsnippet

snippet gl "gl scale f" w
// multiply the current matrix by a general scaling matrix
gl.glScalef(${1:x}, ${2:y}, ${3:z});
endsnippet

snippet gl "gl color 4f" w
gl.glColor4f(${1:red}, ${2:green}, ${3:blue}, ${4:alpha});
endsnippet

snippet gl "gl clear color" w
gl.glClearColor(${1:red}, ${2:green}, ${3:blue}, ${4:alpha});
endsnippet

snippet gl "gl color 3f" w
gl.glColor3f(${1:red}, ${2:green}, ${3:blue});
endsnippet

snippet gl "gl push matrix" w
// spush and pop the current matrix stack
gl.glPushMatrix();
${1}
gl.glPopMatrix();
endsnippet

snippet gl "gl gen lists" w
gl.glGenLists(${1:1})
endsnippet

snippet gl "gl flush" w
// Empties buffers. Call this when all previous issues commands completed
gl.glFlush();
${1}
endsnippet

snippet gl "gl get error" w
println(gl.glGetError());
endsnippet

snippet gl "gl clear" w
gl.glClear(${1:GL.GL_COLOR_BUFFER_BIT}${2: | }${3:GL.GL_DEPTH_BUFFER_BIT});
endsnippet

#frame operations
snippet fr "framerate" w
frameRate(${1:30});
${2}
endsnippet

snippet fr "frameRate" w
frameRate
endsnippet

snippet fr "frameCount" w
frameCount
endsnippet

snippet fr "saveFrame" w
saveFrame("${1:filename-####}${2:.ext}");
endsnippet

#size
snippet size "normal size" w
size(${1:200}, ${2:200}${3:, P3D});
endsnippet

snippet size "opengl size" w
size(${1:200}, ${2:200}${3:, OPENGL});
endsnippet

#PRIMITIVES
#color
snippet color "color" w
color ${1:c}${2: = color(}${3:value1, }${4:value2, }${5:value3)};
endsnippet

#char
snippet char "char" w
char ${1:m}${2: = "}${3:char"};
endsnippet

#float
snippet float "float" w
float ${1:f}${2: = }${3:0.0f};
endsnippet

#int
snippet int "int" w
int ${1:f}${2: = }${3:0};
endsnippet

#boolean
snippet boolean "boolean" w
boolean ${1:b}${2: = }${3:true};
endsnippet

#byte
snippet byte "byte" w
byte ${1:b}${2: = }${3:127};
endsnippet

#string
snippet string "string" w
String ${1:str}${2: = "}${3:CCCP"};
endsnippet

#array
snippet array "array" w
${1:int}[] ${2:numbers}${3: = new $1}[${4:length}];
endsnippet

#object
snippet object "object" w
${1:Object} ${2:o}${3: = new $1}(${4});
endsnippet

#curve
snippet curve "curve" w
curve(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${8:y4});
endsnippet

snippet curve "curve 3D" w
curve(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2}, ${7:x3}, ${8:y3}, ${9:z3}, ${10:x4}, ${11:y4}, ${12:z4});
endsnippet

snippet curve "curve Detail" w
curveDetail(${1:detail});
endsnippet

snippet curve "curve point" w
curvePoint(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:t});
endsnippet

snippet curve "curve tightness" w
curveTightness(${1:squishy});
endsnippet

#bezier
snippet bezier "bezier" w
bezier(${1:x1}, ${2:y1}, ${3:cx1}, ${4:cy1}, ${5:cx2}, ${6:cy2}, ${7:x2}, ${8:y2});
endsnippet

snippet bezier "bezier 3D" w
bezier(${1:x1}, ${2:y1}, ${3:z1}, ${4:cx1}, ${5:cy1}, ${6:cz1}, ${7:cx2}, ${8:cy2}, ${9:cz2}, ${10:x2}, ${11:y2}, ${12:z2});
endsnippet

snippet bezier "bezier detail" w
bezierDetail(${1:detail});
endsnippet

snippet bezier "bezier tangent" w
bezierTangent(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:t});
endsnippet

snippet bezier "bezier point" w
bezierPoint(${1:a}, ${2:b}, ${3:c}, ${4:d}, ${5:t});
endsnippet

#vertex
snippet vertex "vertex" w
vertex(${1:x}, ${2:y}${3:, }${4:u}${5:, }${6:v});
endsnippet

snippet vertex "vertex 3D" w
vertex(${1:x}, ${2:y}, ${3:z}${4:, }${5:u}${6:, }${7:v});
endsnippet

snippet vertex "vertex bezier" w
bezierVertex(${1:cx1}, ${2:cy1}, ${3:cx2}, ${4:cy2}, ${5:x}, ${6:y});
endsnippet

snippet vertex "vertex bezier 3D" w
bezierVertex(${1:cx1}, ${2:cy1}, ${3:cz1}, ${4:cx2}, ${5:cy2}, ${6:cz2}, ${7:x}, ${8:y}, ${9:z});
endsnippet

snippet vertex "vertex curve" w
curveVertex(${1:x}, ${2:y});
endsnippet

snippet vertex "vertex curve 3D" w
curveVertex(${1:x}, ${2:y}, ${3:z});
endsnippet

#stroke
snippet stroke "stroke" w
stroke(${1:value1}, ${2:value2}, ${3:value3}${4:, }${5:alpha});
endsnippet

snippet stroke "stroke weight" w
strokeWeight(${1:1});
endsnippet

snippet stroke "no stroke" w
noStroke();
endsnippet

#mouse
snippet mouse "mouse x" w
mouseX
endsnippet

snippet mouse "mouse y" w
mouseY
endsnippet

snippet mouse "mouse drag" w
void mouseDragged(){
	${1}
}
endsnippet

snippet mouse "mouse move" w
void mouseMoved(){
	${1}
}
endsnippet

snippet mouse "mouse release" w
void mouseReleased(){
	${1}
}
endsnippet

snippet mouse "mouse pressed" w
void mousePressed(){
	${1}
}
endsnippet

snippet mouse "mouse pressed?" w
mousePressed
endsnippet

snippet mouse "mouse button?" w
mouseButton
endsnippet

snippet mouse "pmouse X" w
pmouseX
endsnippet

snippet mouse "pmouse Y" w
pmouseY
endsnippet

#key
snippet key "keycode?" w
keyCode
endsnippet

snippet key "key" w
key
endsnippet

snippet key "key released" w
void keyReleased(){
	${1}
}
endsnippet

snippet key "key typed" w
void keyTyped(){
	${1}
}
endsnippet

snippet key "key pressed" w
void keyPressed(){
	${1}
}
endsnippet

snippet key "key pressed?" w
keyPressed
endsnippet

#file
snippet file "load string" w
loadStrings("${1:filename}");
endsnippet

snippet file "save string" w
saveStrings(${1:filename}, ${2:strings});
endsnippet

snippet file "load bytes" w
loadBytes("${1:filename}");
endsnippet

snippet file "begin record" w
beginRecord(${1:renderer}, ${2:filename});
endsnippet

snippet file "end record" w
endRecord();
endsnippet

snippet file "save bytes" w
saveBytes(${1:filename}, ${2:bytes});
endsnippet

snippet file "create writer" w
createWriter(${1:filename});
endsnippet

snippet file "create reader" w
createReader(${1:filename});
endsnippet

#time
snippet time "hour" w
hour()
endsnippet

snippet time "milliseconds" w
millis()
endsnippet

snippet time "year" w
year()
endsnippet

snippet time "minutes" w
minutes()
endsnippet

snippet time "month" w
month()
endsnippet

snippet time "second" w
second()
endsnippet

#matrix
snippet matrix "reset matrix" w
translate(${1:x}, ${2:y}, ${3:z});
endsnippet

snippet matrix "print matrix" w
printMatrix();
endsnippet

snippet matrix "push matrix" w
pushMatrix();
${1:};
popMatrix();
endsnippet

#text
snippet txt "text data" w
text(${1:data}, ${2:x}, ${3:y}${4:, }${5:z});
endsnippet

snippet txt "text string data" w
text(${1:stringdata}, ${2:x}, ${3:y}, ${4:width}, ${5:height}${6:, }${7:z});
endsnippet

snippet txt "text size" w
textSize(${1:size});
endsnippet

snippet txt "text leading" w
textLeading(${1:size});
endsnippet

snippet txt "text width" w
textWidth(${1:data});
endsnippet

snippet txt "text descent" w
textDescent();
endsnippet

snippet txt "text ascent" w
textAscent();
endsnippet

snippet txt "font" w
PFont ${1:font};
$1 = loadFont("${2:FFScala-32.vlw}");
endsnippet

#load font
snippet txt "load font" w
${1:font} = loadFont("${2:FFScala-32.vlw}");
endsnippet

snippet txt "text font" w
textFont(${1:font}${2:, }${3:size});
endsnippet

#math
snippet math "tangent" w
tan(${1:rad});
endsnippet

snippet math "atan" w
atan(${1:rad});
endsnippet

snippet math "atan2" w
atan2(${1:rad});
endsnippet

snippet math "sin" w
sin(${1:rad});
endsnippet

snippet math "asin" w
asin(${1:rad});
endsnippet

snippet math "cos" w
cos(${1:rad});
endsnippet

snippet math "acos" w
acos(${1:rad});
endsnippet

snippet math "degrees" w
degrees(${1:rad});
endsnippet

snippet math "radians" w
radians(${1:deg});
endsnippet

snippet math "random seed" w
randomSeed(${1:value});
endsnippet

snippet math "random" w
random(${1:value1}${2:, }${3:value2});
endsnippet

snippet math "half PI" w
HALF_PI
endsnippet

snippet math "2 PI" w
TWO_PI
endsnippet

snippet math "PI" w
PI
endsnippet

snippet math "pow" w
pow(${1:num}, ${2:exponent});
endsnippet

snippet math "floor" w
floor(${1:value});
endsnippet

snippet math "sqrt" w
sqrt(${1:value});
endsnippet

snippet math "abs" w
abs(${1:value});
endsnippet

snippet math "sq" w
sq(${1:value});
endsnippet

snippet math "ceil" w
ceil(${1:value});
endsnippet

snippet math "exp" w
exp(${1:value});
endsnippet

snippet math "round" w
round(${1:value}};
endsnippet

snippet math "min" w
min(${1:value1}, ${2:value2}${3:, }${4:value3});
endsnippet

snippet math "max" w
max(${1:value1}, ${2:value2}${3:, }${4:value3});
endsnippet

snippet math "array max" w
max(${1:array});
endsnippet

snippet math "array min" w
min(${1:array});
endsnippet

snippet math "logarithm" w
log(${1:value});
endsnippet

snippet math "map" w
map(${1:value}, ${2:low1}, ${4:high1}, ${5:low2}, ${6:high2});
endsnippet

snippet math "normalize" w
norm(${1:value}, ${2:low}, ${3:high});
endsnippet

snippet math "constrain" w
constrain(${1:value}, ${2:min}, ${3:max});
endsnippet

snippet math "magnitude of a vector" w
mag(${1:a}, ${2:b}${3:, }${4:c});
endsnippet

snippet math "distance" w
dist(${1:x1}, ${2:y1}, ${4:x2}, ${5:y2});
endsnippet

snippet math "distance 3D" w
dist(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2});
endsnippet

#noise math
snippet noise "set noise" w
noise(${1:x}${2:, }${3:y}${4:, }${5:z});
endsnippet

snippet noise "noise detail" w
noiseDetail(${1:octaves}${2:, }${3:falloff});
endsnippet

snippet noise "noise seed" w
noiseSeed(${1:x});
endsnippet

#material
snippet material "shininess" w
shininess(${1:shine});
endsnippet

snippet material "specular" w
specular(${1:value1}, ${2:value2}, ${3:value3}${4:, }${5:alpha});
endsnippet

snippet material "ambient" w
ambient(${1:value1}, ${2:value2}, ${3:value3});
endsnippet

snippet material "emissive" w
emissive(${1:value1}, ${2:value2}, ${3:value3});
endsnippet

#light
snippet light "no light" w
noLights();
endsnippet

snippet light "light" w
lights();
endsnippet

snippet light "diretional light" w
directionalLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${6:nz});
endsnippet

snippet light "point light" w
pointLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:nx}, ${5:ny}, ${6:nz});
endsnippet

snippet light "falloff light" w
lightFalloff(${1:constant}, ${2:linear}, ${3:quadratic});
endsnippet

snippet light "normal light" w
normal(${1:nx}, ${2:ny}, ${3:nz});
endsnippet

snippet light "specular light" w
lightFalloff(${1:v1}, ${2:v2}, ${3:v3});
endsnippet

snippet light "ambient light" w
ambientLight(${1:v1}, ${2:v2}, ${3:v3}${7:, ${4:x}, ${5:y}, ${6:z}});
endsnippet

snippet light "spot light" w
spotLight(${1:v1}, ${2:v2}, ${3:v3}, ${4:x}, ${5:y}, ${6:z}, ${7:nx}, ${8:ny}, ${9:nz}, ${10:angle}, ${11:concentration});
endsnippet

#camera
snippet cam "camera" w
camera(${1:eyeX}, ${2:eyeY}, ${3:eyeZ}, ${4:centerX}, ${5:centerY}, ${6:centerZ}, ${7:upX}, ${8:upY}, ${9:upZ});
endsnippet

snippet cam "ortho" w
ortho(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far});
endsnippet

snippet cam "begin camera" w
beginCamera();
endsnippet

snippet cam "end camera" w
endCamera();
endsnippet

snippet cam "print camera" w
printCamera();
endsnippet

snippet cam "print camera projection" w
printProjection();
endsnippet

snippet cam "perspective camera" w
perspective(${1:fov}, ${2:aspect}, ${3:zNear}, ${4:zFar});
endsnippet

snippet cam "frustrum" w
frustrum(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far});
endsnippet

#transformations
snippet trans "rotate" w
rotate${1:X}(${1:angle});
endsnippet

snippet trans "translate" w
translate(${1:x}, ${2:y}${3:, }${4:z});
endsnippet

snippet trans "scale size" w
scale(${1:size});
endsnippet

snippet trans "scale" w
scale(${1:x}, ${2:y}${3:, }${4:z});
endsnippet

#coordinates
snippet coord "coord" w
${1:model/screen}${2:X}(${3:x}, ${4:y}, ${5:z});
endsnippet

#effects
snippet fx "brightness" w
brightness(${1:color});
endsnippet

snippet fx "lerp color" w
lerpColor(${1:c1}, ${2:c2}, ${3:amt});
endsnippet

snippet fx "saturation" w
saturation(${1:color});
endsnippet

snippet fx "hue" w
hue(${1:color});
endsnippet

snippet fx "alpha" w
alpha(${1:color});
endsnippet

snippet fx "tint" w
tint(${1:value1}, ${2:value2}, ${3:value3}${4:, }${5:alpha});
endsnippet

snippet fx "notint" w
noTint();
endsnippet

#pixel
snippet px "set pixel" w
set(${1:x}, ${2:y}, ${3:color/image});
endsnippet

snippet px "update pixel" w
updatePixels();
endsnippet

snippet px "load pixel" w
loadPixels();
endsnippet

snippet px "pixels" w
pixels[${1:index}]
endsnippet

snippet px "get pixel" w
get(${1:x}, ${2:y}${3:, }${4:width}${5:, }${6:height});
endsnippet

#geometric figures
snippet geof "triangle" w
triangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3});
endsnippet

snippet geof "line" w
line(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2});
endsnippet

snippet geof "line 3D" w
line(${1:x1}, ${2:y1}, ${3:z1}, ${4:x2}, ${5:y2}, ${6:z2});
endsnippet

snippet geof "arc" w
arc(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:start}, ${6:stop});
endsnippet

snippet geof "point" w
point(${1:x}, ${2:y}${3:, }${4:z});
endsnippet

snippet geof "quad" w
quad(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:x3}, ${6:y3}, ${7:x4}, ${8:y4});
endsnippet

snippet geof "ellipse" w
ellipse(${1:x}, ${2:y}, ${3:width}, ${4:height});
endsnippet

snippet geof "rect" w
rect(${1:x}, ${2:y}, ${3:width}, ${4:height});
endsnippet

snippet geof "box" w
box(${1:width}, ${2:height}, ${3:depth});
endsnippet

snippet geof "sphere" w
sphere(${1:radius});
endsnippet

snippet geof "sphere details" w
sphereDetail(${1:n});
endsnippet

snippet geof "set smooth" w
smooth();
endsnippet

snippet geof "set no smooth" w
noSmooth();
endsnippet

#array operations
snippet arrop "normal split" w
split("${1:str}"${2: , }${3:delimiter});
endsnippet

snippet arrop "split Tokens" w
splitTokens(${1:str}${2:, }${3:tokens});
endsnippet

snippet arrop "join" w
join(${1:strgArray}${2: , }${3:seperator});
endsnippet

snippet arrop "shorten" w
shorten(${1:array});
endsnippet

snippet arrop "concat" w
concat(${1:array1}, ${2:array2});
endsnippet

snippet arrop "subset" w
subset(${1:array}, ${2:offset});
endsnippet

snippet arrop "append" w
append(${1:array}, ${2:element});
endsnippet

snippet arrop "reverse" w
reverse(${1:array});
endsnippet

snippet arrop "splice" w
splice(${1:array}, ${2:value/array2}, ${3:index});
endsnippet

snippet arrop "sort" w
sort(${1:dataArray}${2:, }${3:count});
endsnippet

snippet arrop "expand" w
expand(${1:array}${2:, }${3:newSize});
endsnippet

snippet arrop "array copy" w
arrayCopy(${1:src}, ${2:dest}, ${3:, }${3:length});
endsnippet

#string operations
snippet strop "str" w
str("${1:str}");
endsnippet

snippet strop "match" w
match(${1:str}, ${2:regexp});
endsnippet

snippet strop "trim" w
trim(${1:str});
endsnippet

snippet strop "nf" w
nf(${2:value}, ${3:left}${4:, }${5:right});
endsnippet

snippet strop "nfs" w
nfs(${2:value}, ${3:left}${4:, }${5:right});
endsnippet

snippet strop "nfp" w
nfp(${2:value}, ${3:left}${4:, }${5:right});
endsnippet

snippet strop "nfc" w
nfc(${1:value}${2:, }${3:right});
endsnippet

#convert
snippet convert "unbinary" w
unbinary("${1:str}"});
endsnippet

snippet convert "hexadecimal" w
hex(${1:c});
endsnippet

snippet convert "unhex" w
unhex(${1:c});
endsnippet

snippet convert "binary" w
binary(${1:value}${2:, }${3:digits});
endsnippet

#image operations
snippet image "load image" w
loadImage(${1:filename});
endsnippet

snippet image "image" w
image(${1:img}, ${2:x}, ${3:y}${4:, }${5:width}${6:, }${7:height});
endsnippet

snippet copy "copy" w
copy(${1:srcImg}${2:, }${3:x}, ${4:y}, ${5:width}, ${6:height}, ${7:dx}, ${8:dy}, ${9:dwidth}, ${10:dheight});
endsnippet

#containers
snippet bg "bg" w
background(${1:value1}, ${2:value2}, ${3:value3}${4:, }${5:alpha});
endsnippet

snippet pg "pg" w
PGraphics pg;
pg = createGraphics(${1:width}, ${2:height}${3:, }${4:applet});
endsnippet

snippet pimage "pimage" w
PImage(${1:width}, ${2:height});
endsnippet

#UTILS
#nofill
snippet nofill "nofill" w
noFill();
endsnippet

#fill
snippet fill "fill" w
fill(${1:value1}, ${2:value2}, ${3:value3}${4:, }${5:alpha});
endsnippet

#red
snippet red "red" w
red(${1:color});
endsnippet

#green
snippet green "green" w
green(${1:color});
endsnippet

#blue
snippet blue "blue" w
blue(${1:color});
endsnippet

#status
snippet status "status" w
status(${1:text});
endsnippet

#param
snippet param "param" w
param(${1:s});
endsnippet

#link
snippet link "link" w
link(${1:url}${2:, }${3:target});
endsnippet

#@param
snippet @ "@" w
@${1:param/return/private/public}  ${1:parameter}  ${2:description}
endsnippet


