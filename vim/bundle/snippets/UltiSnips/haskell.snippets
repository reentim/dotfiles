snippet lang "lang" w
{-# LANGUAGE ${1:OverloadedStrings} #-}
endsnippet

snippet info "info" w
-- |
-- Module      :  ${1:Module.Namespace}
-- Copyright   :  ${2:Author} ${3:2011-2012}
-- License     :  ${4:BSD3}
--
-- Maintainer  :  ${5:email@something.com}
-- Stability   :  ${6:experimental}
-- Portability :  ${7:unknown}
--
-- ${8:Description}
--
endsnippet

snippet import "import" w
import           ${1:Data.Text}
endsnippet

snippet import2 "import2" w
import           ${1:Data.Text} (${2:head})
endsnippet

snippet importq "importq" w
import qualified ${1:Data.Text} as ${2:T}
endsnippet

snippet inst "inst" w
instance ${1:Monoid} ${2:Type} where
	${3}
endsnippet

snippet type "type" w
type ${1:Type} = ${2:Type}
endsnippet

snippet data "data" w
data ${1:Type} = ${2:$1} ${3:Int}
endsnippet

snippet newtype "newtype" w
newtype ${1:Type} = ${2:$1} ${3:Int}
endsnippet

snippet class "class" w
class ${1:Class} a where
	${2}
endsnippet

snippet module "module" w
module `!v substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')` (
)	where
`!v expand('%') =~ 'Main' ? "\n\nmain = do\n  print \"hello world\"" : ""`
endsnippet

snippet const "const" w
${1:name} :: ${2:a}
$1 = ${3:undefined}
endsnippet

snippet fn "fn" w
${1:fn} :: ${2:a} -> ${3:a}
$1 ${4} = ${5:undefined}
endsnippet

snippet fn2 "fn2" w
${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}
$1 ${5} = ${6:undefined}
endsnippet

snippet ap "ap" w
${1:map} ${2:fn} ${3:list}
endsnippet

snippet do "do" w
do
endsnippet

snippet λ "λ" w
\${1:x} -> ${2}
endsnippet

snippet \ "\" w
\${1:x} -> ${2}
endsnippet

snippet <- "<-" w
${1:a} <- ${2:m a}
endsnippet

snippet ← "←" w
${1:a} <- ${2:m a}
endsnippet

snippet -> "->" w
${1:m a} -> ${2:a}
endsnippet

snippet → "→" w
${1:m a} -> ${2:a}
endsnippet

snippet tup "tup" w
(${1:a}, ${2:b})
endsnippet

snippet tup2 "tup2" w
(${1:a}, ${2:b}, ${3:c})
endsnippet

snippet tup3 "tup3" w
(${1:a}, ${2:b}, ${3:c}, ${4:d})
endsnippet

snippet rec "rec" w
${1:Record} { ${2:recFieldA} = ${3:undefined}
			, ${4:recFieldB} = ${5:undefined}
			}
endsnippet

snippet case "case" w
case ${1:something} of
	${2} -> ${3}
endsnippet

snippet let "let" w
let ${1} = ${2}
in ${3}
endsnippet

snippet where "where" w
where
	${1:fn} = ${2:undefined}
endsnippet


